<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AutoAITalk.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AutoAITalk.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Aug 21 14:25:37 2025
<BR><P>
<H3>Maximum Stack Usage =      29920 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; AudioInputProcess &rArr; opus_encode &rArr; opus_encode_native &rArr; opus_encode_frame_native &rArr; silk_Encode &rArr; silk_encode_frame_FLP &rArr; silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[18]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">PendSV_Handler</a><BR>
 <LI><a href="#[2c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[248]">quant_partition</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[248]">quant_partition</a><BR>
 <LI><a href="#[1fe]">opus_decode_native</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fe]">opus_decode_native</a><BR>
 <LI><a href="#[1ff]">opus_decode_frame</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ff]">opus_decode_frame</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC1_2_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[49]">ADC3_ADC4_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[32]">ATIM1_BRK_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[35]">ATIM1_CC_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[34]">ATIM1_TRG_COM_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[33]">ATIM1_UP_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[45]">ATIM2_BRK_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[48]">ATIM2_CC_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[47]">ATIM2_TRG_COM_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[46]">ATIM2_UP_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[6f]">ATIM3_BRK_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[72]">ATIM3_CC_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[71]">ATIM3_TRG_COM_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[70]">ATIM3_UP_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[50]">BTIM1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[51]">BTIM2_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from n32h47x_48x_it.o(i.BusFault_Handler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[77]">Cordic_IRQ_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[7e]">DAC1_2_3_4_Underflow_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[7f]">DAC5_6_7_8_Underflow_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[25]">DMA1_Channel1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[26]">DMA1_Channel2_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[27]">DMA1_Channel3_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[28]">DMA1_Channel4_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[29]">DMA1_Channel5_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel6_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel7_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[65]">DMA1_Channel8_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[52]">DMA2_Channel1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[53]">DMA2_Channel2_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[54]">DMA2_Channel3_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[55]">DMA2_Channel4_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[56]">DMA2_Channel5_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel6_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel7_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[66]">DMA2_Channel8_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from n32h47x_48x_it.o(i.DebugMon_Handler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[1]">EP1_IN_Callback</a> from usbfsd_endp.o(i.EP1_IN_Callback) referenced 2 times from usbfsd_istr.o(.data)
 <LI><a href="#[3]">EP3_OUT_Callback</a> from usbfsd_endp.o(i.EP3_OUT_Callback) referenced 2 times from usbfsd_istr.o(.data)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[2f]">FDCAN1_INT0_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[30]">FDCAN1_INT1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[58]">FDCAN2_INT0_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[59]">FDCAN2_INT1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[5a]">FDCAN3_INT0_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[5b]">FDCAN3_INT1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[81]">FEMC_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[76]">FMAC_IRQ_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[7d]">GTIM10_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[36]">GTIM1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[37]">GTIM2_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[38]">GTIM3_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[4c]">GTIM4_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[6e]">GTIM5_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[73]">GTIM6_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[7a]">GTIM7_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[7b]">GTIM8_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[7c]">GTIM9_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from n32h47x_48x_it.o(i.HardFault_Handler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[60]">I2C3_ER_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[5f]">I2C3_EV_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[62]">I2C4_ER_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[61]">I2C4_EV_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[74]">LPTIM1_WKUP_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[75]">LPTIM2_WKUP_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from n32h47x_48x_it.o(i.MemManage_Handler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from n32h47x_48x_it.o(i.NMI_Handler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[1b]">PVD_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[43]">RTCAlarm_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[1c]">RTC_TAMPER_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[67]">SAC_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[4b]">SDIO_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[68]">SMPU_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[3e]">SPI2_I2S2_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[4d]">SPI3_I2S3_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[6d]">SPI4_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[78]">SPI5_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[79]">SPI6_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[57]">SRAM_ERR_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from n32h47x_48x_it.o(i.SVC_Handler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[86]">Standard_GetConfiguration</a> from usbfsd_core.o(i.Standard_GetConfiguration) referenced from usbfsd_core.o(i.Data_Setup0)
 <LI><a href="#[87]">Standard_GetInterface</a> from usbfsd_core.o(i.Standard_GetInterface) referenced from usbfsd_core.o(i.Data_Setup0)
 <LI><a href="#[85]">Standard_GetStatus</a> from usbfsd_core.o(i.Standard_GetStatus) referenced from usbfsd_core.o(i.Data_Setup0)
 <LI><a href="#[19]">SysTick_Handler</a> from n32h47x_48x_it.o(i.SysTick_Handler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[83]">SystemInit</a> from system_n32h47x_48x.o(i.SystemInit) referenced from startup_n32h482.o(.text)
 <LI><a href="#[4f]">UART5_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[63]">UART6_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from n32h47x_48x_it.o(i.UART7_IRQHandler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[6c]">UART8_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[4a]">UCDR_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[4e]">USART4_IRQHandler</a> from n32h47x_48x_it.o(i.USART4_IRQHandler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[2d]">USB_FS_HP_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[2e]">USB_FS_LP_IRQHandler</a> from n32h47x_48x_it.o(i.USB_FS_LP_IRQHandler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[44]">USB_FS_WKUP_IRQHandler</a> from n32h47x_48x_it.o(i.USB_FS_WKUP_IRQHandler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[6a]">USB_HS_EPx_IN_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[69]">USB_HS_EPx_OUT_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[80]">USB_HS_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[6b]">USB_HS_WKUP_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[2]">USB_ProcessNop</a> from usbfsd_core.o(i.USB_ProcessNop) referenced 38 times from usbfsd_istr.o(.data)
 <LI><a href="#[15]">UsageFault_Handler</a> from n32h47x_48x_it.o(i.UsageFault_Handler) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[8]">Virtual_Com_Port_Data_Setup</a> from usbfsd_prop.o(i.Virtual_Com_Port_Data_Setup) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[c]">Virtual_Com_Port_GetConfigDescriptor</a> from usbfsd_prop.o(i.Virtual_Com_Port_GetConfigDescriptor) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[b]">Virtual_Com_Port_GetDeviceDescriptor</a> from usbfsd_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[88]">Virtual_Com_Port_GetLineCoding</a> from usbfsd_prop.o(i.Virtual_Com_Port_GetLineCoding) referenced from usbfsd_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[d]">Virtual_Com_Port_GetStringDescriptor</a> from usbfsd_prop.o(i.Virtual_Com_Port_GetStringDescriptor) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[a]">Virtual_Com_Port_Get_Interface_Setting</a> from usbfsd_prop.o(i.Virtual_Com_Port_Get_Interface_Setting) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[9]">Virtual_Com_Port_NoData_Setup</a> from usbfsd_prop.o(i.Virtual_Com_Port_NoData_Setup) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[5]">Virtual_Com_Port_Reset</a> from usbfsd_prop.o(i.Virtual_Com_Port_Reset) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[e]">Virtual_Com_Port_SetConfiguration</a> from usbfsd_prop.o(i.Virtual_Com_Port_SetConfiguration) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[f]">Virtual_Com_Port_SetDeviceAddress</a> from usbfsd_prop.o(i.Virtual_Com_Port_SetDeviceAddress) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[89]">Virtual_Com_Port_SetLineCoding</a> from usbfsd_prop.o(i.Virtual_Com_Port_SetLineCoding) referenced from usbfsd_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[6]">Virtual_Com_Port_Status_In</a> from usbfsd_prop.o(i.Virtual_Com_Port_Status_In) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[7]">Virtual_Com_Port_Status_Out</a> from usbfsd_prop.o(i.Virtual_Com_Port_Status_Out) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[4]">Virtual_Com_Port_init</a> from usbfsd_prop.o(i.Virtual_Com_Port_init) referenced 2 times from usbfsd_prop.o(.data)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[5c]">XSPI_IRQHandler</a> from startup_n32h482.o(.text) referenced from startup_n32h482.o(RESET)
 <LI><a href="#[84]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32h482.o(.text)
 <LI><a href="#[8b]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[8c]">downmix_int</a> from opus_encoder.o(i.downmix_int) referenced from opus_encoder.o(i.opus_encode)
 <LI><a href="#[8a]">fputc</a> from log.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[82]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[84]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(.text)
</UL>
<P><STRONG><a name="[314]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[315]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[316]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[317]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[318]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[319]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC3_ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ATIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ATIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ATIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ATIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ATIM2_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ATIM2_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ATIM2_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ATIM2_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>ATIM3_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>ATIM3_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>ATIM3_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ATIM3_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>Cordic_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DAC1_2_3_4_Underflow_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DAC5_6_7_8_Underflow_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FDCAN1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FDCAN1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FDCAN2_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FDCAN2_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FDCAN3_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FDCAN3_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>FEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FMAC_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>GTIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GTIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>GTIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>GTIM8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>GTIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>LPTIM1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>LPTIM2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SMPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_I2S2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI3_I2S3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SRAM_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UCDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_FS_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USB_HS_EPx_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USB_HS_EPx_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>USB_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USB_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>XSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32h482.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[31a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[31b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_inverse_pred_gain_QA_c
</UL>

<P><STRONG><a name="[31c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePush
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LBRR_encode_FLP
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_IIR_FIR
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_quant_LTP_gains
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_NLSFs
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_update
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_extensions_generate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad_impl
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_del_dec_quant
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_core
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LBRR_encode_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_down_FIR
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_get_info
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downmix_and_resample
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_analysis
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_synthesis
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_merge
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_hybrid_folding
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interleave_hadamard
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinterleave_hadamard
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer_del_dec
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_core
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_extensions_generate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_shrink
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_c
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_filter
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_c
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG
</UL>

<P><STRONG><a name="[31e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[31f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_setup_fs
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis_reset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_pulses
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decoder_set_fs
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_pulses
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_setup_fs
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_preemphasis
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitEncoder
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_ctl
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_init_arch
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mdcts
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_lpc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denormalise_bands
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_encoder
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_pulses
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_reset_decoder
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_decoder
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decoder_set_fs
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_warped_autocorrelation_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
</UL>

<P><STRONG><a name="[321]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[112]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_SendATCommand
</UL>

<P><STRONG><a name="[95]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrMatrix_FLP
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_product_FLP_c
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2int
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_energy_st3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_warped_autocorrelation_FLP
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_schur_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_warped_autocorrelation_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_energy_st3
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_SetColor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_product_FLP_c
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp2Log2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denormalise_bands
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_energy_st3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_warped_autocorrelation_FLP
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_residual_energy_FLP
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_schur_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_schur_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_SetColor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_fine_energy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2int
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_SetColor
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrMatrix_FLP
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_product_FLP_c
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_pcm_soft_clip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_band_energies
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp2Log2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_stereo_width
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_fine_energy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_analysis
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l1_metric
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_vbr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denormalise_bands
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_merge
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intensity_stereo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise_residual
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pitch_gain
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2int
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_energy_st3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_warped_autocorrelation_FLP
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warped_true2monic_coefs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_coefs
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_residual_energy_FLP
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_schur_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_vbr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_schur_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrVector_FLP
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrMatrix_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_autocorrelation_FLP
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_pcm_soft_clip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_band_energies
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp2Log2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_stereo_width
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_analysis
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l1_metric
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denormalise_bands
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_merge
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intensity_stereo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise_residual
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pitch_gain
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_energy_st3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_warped_autocorrelation_FLP
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warped_true2monic_coefs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_coefs
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_residual_energy_FLP
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_schur_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LTP_FLP
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
</UL>

<P><STRONG><a name="[322]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23f]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[97]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[323]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[324]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15b]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[325]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[326]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a7]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[aa]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[327]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>AT_INIT</STRONG> (Thumb, 582 bytes, Stack size 8 bytes, main.o(i.AT_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_INIT &rArr; systick_delay_ms &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_SendATCommand
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDeviceState
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>AudioDecodeProcess</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, main.o(i.AudioDecodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 3632<LI>Call Chain = AudioDecodeProcess &rArr; opus_decode &rArr; opus_decode_native &rArr;  opus_decode_native (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_DMA_INIT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueSize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueFront
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>AudioInputProcess</STRONG> (Thumb, 220 bytes, Stack size 272 bytes, main.o(i.AudioInputProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 29920<LI>Call Chain = AudioInputProcess &rArr; opus_encode &rArr; opus_encode_native &rArr; opus_encode_frame_native &rArr; silk_Encode &rArr; silk_encode_frame_FLP &rArr; silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_SendBuffer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_SendATCommand
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueEmpty
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsSend_WaitTimeOut
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDeviceState
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>ChangeDeviceState</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, main.o(i.ChangeDeviceState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ChangeDeviceState &rArr; WS2812_SetColor &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_SetColor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_INIT
</UL>

<P><STRONG><a name="[b8]"></a>DMA_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Send
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[d7]"></a>DMA_ConfigInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_DMA_INIT
</UL>

<P><STRONG><a name="[d3]"></a>DMA_DeInit</STRONG> (Thumb, 430 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_DMA_INIT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_DMA_Configuration
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_DMA_INIT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_DMA_INIT
</UL>

<P><STRONG><a name="[b6]"></a>DMA_EnableChannel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_DMA_Configuration
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_Start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mic_Start_Record
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[113]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32h47x_48x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Send
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[d5]"></a>DMA_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, n32h47x_48x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_DMA_INIT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_DMA_Configuration
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_DMA_INIT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_DMA_INIT
</UL>

<P><STRONG><a name="[d6]"></a>DMA_RequestRemap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_RequestRemap))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_DMA_INIT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_DMA_Configuration
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_DMA_INIT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_DMA_INIT
</UL>

<P><STRONG><a name="[b5]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[d4]"></a>DMA_StructInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, n32h47x_48x_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_DMA_INIT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_DMA_Configuration
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_DMA_INIT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_DMA_INIT
</UL>

<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>EP1_IN_Callback</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbfsd_endp.o(i.EP1_IN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EP1_IN_Callback &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpTxValid
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpTxCnt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CopyUserToPMABuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_istr.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>EP3_OUT_Callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbfsd_endp.o(i.EP3_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EP3_OUT_Callback &rArr; USB_SilRead &rArr; USB_CopyPMAToUserBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SilRead
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpRxValid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_To_USART_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_istr.o(.data)
</UL>
<P><STRONG><a name="[125]"></a>EXTI_ClrITPendBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32h47x_48x_exti.o(i.EXTI_ClrITPendBit))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>Enter_LowPowerMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_config.o(i.Enter_LowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[d9]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, n32h47x_48x_gpio.o(i.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_GPIO_INIT
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_GPIO_INIT
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_GPIO_INIT
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_GPIO_INIT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[11d]"></a>GPIO_InitStruct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_gpio.o(i.GPIO_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_GPIO_INIT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[d1]"></a>Handle_USBAsynchXfer</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, hw_config.o(i.Handle_USBAsynchXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Handle_USBAsynchXfer &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpTxValid
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpTxCnt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CopyUserToPMABuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>I2S2_DMA_INIT</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, microphone.o(i.I2S2_DMA_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2S2_DMA_INIT &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RequestRemap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>I2S2_GPIO_INIT</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, microphone.o(i.I2S2_GPIO_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2S2_GPIO_INIT &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>I2S2_I2S2_INIT</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, microphone.o(i.I2S2_I2S2_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = I2S2_I2S2_INIT &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigI2S2Clk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>I2S2_RCC_INIT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, microphone.o(i.I2S2_RCC_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S2_RCC_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>I2S_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32h47x_48x_spi.o(i.I2S_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_Start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mic_Start_Record
</UL>

<P><STRONG><a name="[dd]"></a>I2S_Init</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, n32h47x_48x_spi.o(i.I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_I2S_INIT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_I2S2_INIT
</UL>

<P><STRONG><a name="[fb]"></a>I2S_InitStruct</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_spi.o(i.I2S_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_I2S_INIT
</UL>

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>Mic_Start_Record</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, microphone.o(i.Mic_Start_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mic_Start_Record
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableDma
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_NVIC_Configuration
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[116]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_NVIC_Configuration
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[131]"></a>PowerOn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbfsd_pwr.o(i.PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[b1]"></a>QueueEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(i.QueueEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[b2]"></a>QueueFront</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(i.QueueFront))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[1f6]"></a>QueueInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queue.o(i.QueueInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>QueuePop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.QueuePop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QueuePop &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[f0]"></a>QueuePush</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.QueuePush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QueuePush &rArr; perror &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>QueueSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(i.QueueSize))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[db]"></a>RCC_ConfigI2S2Clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_ConfigI2S2Clk))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_I2S2_INIT
</UL>

<P><STRONG><a name="[fa]"></a>RCC_ConfigI2S3Clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_ConfigI2S3Clk))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_I2S_INIT
</UL>

<P><STRONG><a name="[13e]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_ConfigPclk1))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_RCC_INIT
</UL>

<P><STRONG><a name="[df]"></a>RCC_EnableAHB1PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAHB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_RCC_INIT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_RCC_INIT
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_RCC_INIT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_RCC_INIT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[e2]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAHBPeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_RCC_INIT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_RCC_INIT
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_RCC_INIT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_RCC_INIT
</UL>

<P><STRONG><a name="[e1]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAPB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_RCC_INIT
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_RCC_INIT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_RCC_INIT
</UL>

<P><STRONG><a name="[ff]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAPB1PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[e0]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAPB2PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_RCC_INIT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_RCC_INIT
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_RCC_INIT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_RCC_INIT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[fe]"></a>RCC_EnableAPB2PeriphReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_rcc.o(i.RCC_EnableAPB2PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[dc]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 488 bytes, Stack size 104 bytes, n32h47x_48x_rcc.o(i.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_I2S_INIT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_I2S2_INIT
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[f4]"></a>Resume</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, usbfsd_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[f5]"></a>Resume_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbfsd_pwr.o(i.Resume_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[f6]"></a>SOF_Callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbfsd_endp.o(i.SOF_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SOF_Callback &rArr; Handle_USBAsynchXfer &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_USBAsynchXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[b9]"></a>SPEAKER_DMA_INIT</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, speaker.o(i.SPEAKER_DMA_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPEAKER_DMA_INIT &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RequestRemap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[f7]"></a>SPEAKER_GPIO_INIT</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, speaker.o(i.SPEAKER_GPIO_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPEAKER_GPIO_INIT &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>SPEAKER_I2S_INIT</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, speaker.o(i.SPEAKER_I2S_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SPEAKER_I2S_INIT &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigI2S3Clk
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_InitStruct
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>SPEAKER_RCC_INIT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, speaker.o(i.SPEAKER_RCC_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPEAKER_RCC_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>SPEAKER_Start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, speaker.o(i.SPEAKER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPEAKER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableDma
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, n32h47x_48x_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_I2S_INIT
</UL>

<P><STRONG><a name="[e7]"></a>SPI_I2S_EnableDma</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_spi.o(i.SPI_I2S_EnableDma))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_Start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mic_Start_Record
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>SetEPRxStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbfsd_regs.o(i.SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[101]"></a>SetEPTxStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbfsd_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[ec]"></a>Standard_ClearFeature</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, usbfsd_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Standard_ClearFeature &rArr; USB_SetEpRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrDattogTx
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrDattogRx
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpRxCnt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[86]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbfsd_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[12a]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbfsd_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetStringDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetDeviceDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetConfigDescriptor
</UL>

<P><STRONG><a name="[87]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbfsd_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[85]"></a>Standard_GetStatus</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, usbfsd_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[ea]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbfsd_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[eb]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbfsd_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[ee]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbfsd_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[ed]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usbfsd_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[104]"></a>Suspend</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usbfsd_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SystemInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, system_n32h47x_48x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStartupVolt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>TIM_ConfigArPreload</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_ConfigArPreload))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_PWM
</UL>

<P><STRONG><a name="[13b]"></a>TIM_ConfigOc2Preload</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_ConfigOc2Preload))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_PWM
</UL>

<P><STRONG><a name="[13f]"></a>TIM_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Send
</UL>

<P><STRONG><a name="[134]"></a>TIM_EnableDma</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_EnableDma))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_Send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_DMA_INIT
</UL>

<P><STRONG><a name="[13a]"></a>TIM_InitOc2</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, n32h47x_48x_tim.o(i.TIM_InitOc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_InitOc2
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_PWM
</UL>

<P><STRONG><a name="[139]"></a>TIM_InitOcStruct</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_InitOcStruct))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_PWM
</UL>

<P><STRONG><a name="[137]"></a>TIM_InitTimBaseStruct</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32h47x_48x_tim.o(i.TIM_InitTimBaseStruct))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_PWM
</UL>

<P><STRONG><a name="[138]"></a>TIM_InitTimeBase</STRONG> (Thumb, 840 bytes, Stack size 8 bytes, n32h47x_48x_tim.o(i.TIM_InitTimeBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_PWM
</UL>

<P><STRONG><a name="[108]"></a>UART7_DMA_Configuration</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, websocket.o(i.UART7_DMA_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART7_DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RequestRemap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>UART7_GPIO_INIT</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, websocket.o(i.UART7_GPIO_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART7_GPIO_INIT &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>UART7_INIT</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, websocket.o(i.UART7_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UART7_INIT &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableDMA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 846 bytes, Stack size 24 bytes, n32h47x_48x_it.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART7_IRQHandler &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePush
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_DMA_Configuration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>UART7_NVIC_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, websocket.o(i.UART7_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART7_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>UART7_RCC_INIT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, websocket.o(i.UART7_RCC_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART7_RCC_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>UART7_SendATCommand</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, websocket.o(i.UART7_SendATCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART7_SendATCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_INIT
</UL>

<P><STRONG><a name="[4e]"></a>USART4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.USART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART4_IRQHandler &rArr; USART_To_USB_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_To_USB_Send_Data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>USART7_SendBuffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, websocket.o(i.USART7_SendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART7_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
</UL>

<P><STRONG><a name="[11c]"></a>USART_COM_Init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, hw_config.o(i.USART_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USART_COM_Init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config_Default
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[11e]"></a>USART_Config</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, hw_config.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USART_Config &rArr; USART_Config_Default &rArr; USART_COM_Init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config_Default
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Status_In
</UL>

<P><STRONG><a name="[10e]"></a>USART_ConfigInt</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, n32h47x_48x_usart.o(i.USART_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_INIT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[11f]"></a>USART_Config_Default</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_config.o(i.USART_Config_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USART_Config_Default &rArr; USART_COM_Init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[10f]"></a>USART_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_INIT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[10d]"></a>USART_EnableDMA</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_EnableDMA))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_INIT
</UL>

<P><STRONG><a name="[114]"></a>USART_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_SendBuffer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_SendATCommand
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_To_USART_Send_Data
</UL>

<P><STRONG><a name="[110]"></a>USART_GetIntStatus</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, n32h47x_48x_usart.o(i.USART_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>USART_Init</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, n32h47x_48x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_INIT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_COM_Init
</UL>

<P><STRONG><a name="[111]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_To_USB_Send_Data
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_SendBuffer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_SendATCommand
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_To_USART_Send_Data
</UL>

<P><STRONG><a name="[10b]"></a>USART_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32h47x_48x_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_INIT
</UL>

<P><STRONG><a name="[11b]"></a>USART_To_USB_Send_Data</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hw_config.o(i.USART_To_USB_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_To_USB_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>USB_ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessSetup0
</UL>

<P><STRONG><a name="[103]"></a>USB_ClrDattogRx</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_ClrDattogRx))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[100]"></a>USB_ClrDattogTx</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_ClrDattogTx))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[12f]"></a>USB_ClrStsOut</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_ClrStsOut))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[c7]"></a>USB_CopyPMAToUserBuf</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, usbfsd_mem.o(i.USB_CopyPMAToUserBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_CopyPMAToUserBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SilRead
</UL>

<P><STRONG><a name="[c3]"></a>USB_CopyUserToPMABuf</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, usbfsd_mem.o(i.USB_CopyUserToPMABuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_CopyUserToPMABuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_USBAsynchXfer
</UL>

<P><STRONG><a name="[120]"></a>USB_CorrectTransferLp</STRONG> (Thumb, 590 bytes, Stack size 8 bytes, usbfsd_int.o(i.USB_CorrectTransferLp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB_CorrectTransferLp &rArr; USB_ProcessSetup0 &rArr; Data_Setup0 &rArr; DataStageIn &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessSetup0
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessOut0
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessIn0
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[2e]"></a>USB_FS_LP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.USB_FS_LP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USB_FS_LP_IRQHandler &rArr; USB_Istr &rArr; USB_CorrectTransferLp &rArr; USB_ProcessSetup0 &rArr; Data_Setup0 &rArr; DataStageIn &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, n32h47x_48x_it.o(i.USB_FS_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FS_WKUP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>USB_GetEpRxAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_GetEpRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SilRead
</UL>

<P><STRONG><a name="[129]"></a>USB_GetEpRxCnt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_GetEpRxCnt))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SilRead
</UL>

<P><STRONG><a name="[c2]"></a>USB_GetEpTxAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_GetEpTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[124]"></a>USB_Istr</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, usbfsd_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USB_Istr &rArr; USB_CorrectTransferLp &rArr; USB_ProcessSetup0 &rArr; Data_Setup0 &rArr; DataStageIn &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CorrectTransferLp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FS_LP_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>USB_ProcessIn0</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usbfsd_core.o(i.USB_ProcessIn0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_ProcessIn0 &rArr; DataStageIn &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessPost0
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CorrectTransferLp
</UL>

<P><STRONG><a name="[2]"></a>USB_ProcessNop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbfsd_core.o(i.USB_ProcessNop))
<BR>[Address Reference Count : 2]<UL><LI> usbfsd_istr.o(.data)
<LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>USB_ProcessOut0</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbfsd_core.o(i.USB_ProcessOut0))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_ProcessOut0 &rArr; DataStageOut &rArr; USB_CopyPMAToUserBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessPost0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CorrectTransferLp
</UL>

<P><STRONG><a name="[127]"></a>USB_ProcessPost0</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbfsd_core.o(i.USB_ProcessPost0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ProcessPost0 &rArr; USB_SetEpRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpRxCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessSetup0
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessOut0
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessIn0
</UL>

<P><STRONG><a name="[122]"></a>USB_ProcessSetup0</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, usbfsd_core.o(i.USB_ProcessSetup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USB_ProcessSetup0 &rArr; Data_Setup0 &rArr; DataStageIn &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ByteSwap
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessPost0
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CorrectTransferLp
</UL>

<P><STRONG><a name="[12b]"></a>USB_SetBuftab</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_SetBuftab))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[126]"></a>USB_SetDeviceAddress</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbfsd_core.o(i.USB_SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessIn0
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[12d]"></a>USB_SetEpRxAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_SetEpRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[102]"></a>USB_SetEpRxCnt</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbfsd_regs.o(i.USB_SetEpRxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetEpRxCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessPost0
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[cc]"></a>USB_SetEpRxValid</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_SetEpRxValid))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[12e]"></a>USB_SetEpTxAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_SetEpTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[c4]"></a>USB_SetEpTxCnt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_SetEpTxCnt))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_USBAsynchXfer
</UL>

<P><STRONG><a name="[c9]"></a>USB_SetEpTxValid</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_SetEpTxValid))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_USBAsynchXfer
</UL>

<P><STRONG><a name="[12c]"></a>USB_SetEpType</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbfsd_regs.o(i.USB_SetEpType))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[132]"></a>USB_SilInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbfsd_sil.o(i.USB_SilInit))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[ca]"></a>USB_SilRead</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbfsd_sil.o(i.USB_SilRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SilRead &rArr; USB_CopyPMAToUserBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEpRxAddr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CopyPMAToUserBuf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEpRxCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[cb]"></a>USB_To_USART_Send_Data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hw_config.o(i.USB_To_USART_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_To_USART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32h47x_48x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32h482.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>Virtual_Com_Port_Data_Setup</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbfsd_prop.o(i.Virtual_Com_Port_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Virtual_Com_Port_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbfsd_prop.o(i.Virtual_Com_Port_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Virtual_Com_Port_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbfsd_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>Virtual_Com_Port_GetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbfsd_prop.o(i.Virtual_Com_Port_GetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[d]"></a>Virtual_Com_Port_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbfsd_prop.o(i.Virtual_Com_Port_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Virtual_Com_Port_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Virtual_Com_Port_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbfsd_prop.o(i.Virtual_Com_Port_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Virtual_Com_Port_NoData_Setup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbfsd_prop.o(i.Virtual_Com_Port_NoData_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Virtual_Com_Port_Reset</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, usbfsd_prop.o(i.Virtual_Com_Port_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_Reset &rArr; USB_SetEpRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpType
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpTxAddr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpRxCnt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpRxAddr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDeviceAddress
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetBuftab
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStsOut
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpRxValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Virtual_Com_Port_SetConfiguration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbfsd_prop.o(i.Virtual_Com_Port_SetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Virtual_Com_Port_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbfsd_prop.o(i.Virtual_Com_Port_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>Virtual_Com_Port_SetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbfsd_prop.o(i.Virtual_Com_Port_SetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[6]"></a>Virtual_Com_Port_Status_In</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbfsd_prop.o(i.Virtual_Com_Port_Status_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Virtual_Com_Port_Status_In &rArr; USART_Config &rArr; USART_Config_Default &rArr; USART_COM_Init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Virtual_Com_Port_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbfsd_prop.o(i.Virtual_Com_Port_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Virtual_Com_Port_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbfsd_prop.o(i.Virtual_Com_Port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Virtual_Com_Port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SilInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbfsd_prop.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>WS2812_DMA_INIT</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, ws2812.o(i.WS2812_DMA_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WS2812_DMA_INIT &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RequestRemap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableDma
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>WS2812_GPIO_INIT</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ws2812.o(i.WS2812_GPIO_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WS2812_GPIO_INIT &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>WS2812_PWM</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, ws2812.o(i.WS2812_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WS2812_PWM &rArr; TIM_InitOc2
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimBaseStruct
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOcStruct
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc2
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigOc2Preload
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigArPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>WS2812_RCC_INIT</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ws2812.o(i.WS2812_RCC_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WS2812_RCC_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>WS2812_Send</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ws2812.o(i.WS2812_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WS2812_Send &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableDma
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDeviceState
</UL>

<P><STRONG><a name="[bf]"></a>WS2812_SetColor</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, ws2812.o(i.WS2812_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WS2812_SetColor &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDeviceState
</UL>

<P><STRONG><a name="[bd]"></a>WsSend_WaitTimeOut</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.WsSend_WaitTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WsSend_WaitTimeOut &rArr; systick_delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
</UL>

<P><STRONG><a name="[141]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[329]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[20b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_create
</UL>

<P><STRONG><a name="[143]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32a]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[bc]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
</UL>

<P><STRONG><a name="[151]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[32b]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[144]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
</UL>

<P><STRONG><a name="[14b]"></a>__hardfp_exp</STRONG> (Thumb, 714 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denormalise_bands
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
</UL>

<P><STRONG><a name="[16c]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_pcm_soft_clip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_stereo_width
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_analysis
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l1_metric
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warped_true2monic_coefs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_coefs
</UL>

<P><STRONG><a name="[cf]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_fine_energy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2int
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
</UL>

<P><STRONG><a name="[152]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp2Log2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[155]"></a>__hardfp_log10</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2
</UL>

<P><STRONG><a name="[157]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[15c]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_band_energies
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_stereo_width
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_merge
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intensity_stereo
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise_residual
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pitch_gain
</UL>

<P><STRONG><a name="[148]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[14a]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[150]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[149]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[153]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[147]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[158]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[146]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[14d]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[14f]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[32c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[32d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[32e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[145]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[15d]"></a>_celt_autocorr</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, celt_lpc.o(i._celt_autocorr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _celt_autocorr &rArr; celt_pitch_xcorr_c &rArr; xcorr_kernel_c
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_c
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_downsample
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
</UL>

<P><STRONG><a name="[15f]"></a>_celt_lpc</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, celt_lpc.o(i._celt_lpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _celt_lpc
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_downsample
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
</UL>

<P><STRONG><a name="[162]"></a>alg_quant</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, vq.o(i.alg_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = alg_quant &rArr; exp_rotation &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_pulses
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_pvq_search_c
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise_residual
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_collapse_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[168]"></a>alg_unquant</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, vq.o(i.alg_unquant))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = alg_unquant &rArr; exp_rotation &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pulses
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise_residual
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_collapse_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[16d]"></a>amp2Log2</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, quant_bands.o(i.amp2Log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = amp2Log2 &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[16e]"></a>analysis_compute_dense</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, mlp.o(i.analysis_compute_dense))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = analysis_compute_dense &rArr; gemm_accum
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tansig_approx
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmoid_approx
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gemm_accum
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
</UL>

<P><STRONG><a name="[172]"></a>analysis_compute_gru</STRONG> (Thumb, 502 bytes, Stack size 552 bytes, mlp.o(i.analysis_compute_gru))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = analysis_compute_gru &rArr; gemm_accum
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tansig_approx
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmoid_approx
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gemm_accum
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
</UL>

<P><STRONG><a name="[173]"></a>anti_collapse</STRONG> (Thumb, 716 bytes, Stack size 120 bytes, bands.o(i.anti_collapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = anti_collapse &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_lcg_rand
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[1ca]"></a>bitexact_cos</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, bands.o(i.bitexact_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bitexact_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[1cb]"></a>bitexact_log2tan</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bands.o(i.bitexact_log2tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitexact_log2tan
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[17f]"></a>celt_decode_with_ec</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, celt_decoder.o(i.celt_decode_with_ec))
<BR><BR>[Stack]<UL><LI>Max Depth = 3048<LI>Call Chain = celt_decode_with_ec &rArr; celt_decode_with_ec_dred &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
</UL>

<P><STRONG><a name="[180]"></a>celt_decode_with_ec_dred</STRONG> (Thumb, 4628 bytes, Stack size 360 bytes, celt_decoder.o(i.celt_decode_with_ec_dred))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = celt_decode_with_ec_dred &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_fine_energy
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_energy_finalise
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_compute_allocation
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_decode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefilter_and_fold
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deemphasis
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_synthesis
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_caps
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_filter
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec
</UL>

<P><STRONG><a name="[191]"></a>celt_decoder_get_size</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, celt_decoder.o(i.celt_decoder_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = celt_decoder_get_size &rArr; opus_custom_mode_create
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_mode_create
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_get_size
</UL>

<P><STRONG><a name="[194]"></a>celt_decoder_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, celt_decoder.o(i.celt_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = celt_decoder_init &rArr; opus_custom_decoder_init &rArr; opus_custom_decoder_ctl &rArr; opus_custom_decoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resampling_factor
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_mode_create
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_init
</UL>

<P><STRONG><a name="[197]"></a>celt_encode_with_ec</STRONG> (Thumb, 10650 bytes, Stack size 464 bytes, celt_encoder.o(i.celt_encode_with_ec))
<BR><BR>[Stack]<UL><LI>Max Depth = 3104<LI>Call Chain = celt_encode_with_ec &rArr; quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_band_energies
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_preemphasis
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp2Log2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_shrink
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_fine_energy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_energy_finalise
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transient_analysis
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_encode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_analysis
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_analysis
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_transient_decision
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_vbr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mdcts
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_maxabs16
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_compute_allocation
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_caps
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spreading_decision
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise_bands
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hysteresis_decision
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[1b2]"></a>celt_encoder_get_size</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, celt_encoder.o(i.celt_encoder_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = celt_encoder_get_size &rArr; opus_custom_mode_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_get_size
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_mode_create
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_get_size
</UL>

<P><STRONG><a name="[1b4]"></a>celt_encoder_init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, celt_encoder.o(i.celt_encoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = celt_encoder_init &rArr; opus_custom_encoder_init_arch &rArr; opus_custom_encoder_ctl &rArr; opus_custom_encoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resampling_factor
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_init_arch
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_mode_create
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
</UL>

<P><STRONG><a name="[17c]"></a>celt_fir_c</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, celt_lpc.o(i.celt_fir_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = celt_fir_c &rArr; xcorr_kernel_c
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcorr_kernel_c
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
</UL>

<P><STRONG><a name="[17e]"></a>celt_iir</STRONG> (Thumb, 674 bytes, Stack size 64 bytes, celt_lpc.o(i.celt_iir))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = celt_iir &rArr; xcorr_kernel_c
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcorr_kernel_c
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
</UL>

<P><STRONG><a name="[175]"></a>celt_lcg_rand</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bands.o(i.celt_lcg_rand))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[15e]"></a>celt_pitch_xcorr_c</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, pitch.o(i.celt_pitch_xcorr_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = celt_pitch_xcorr_c &rArr; xcorr_kernel_c
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xcorr_kernel_c
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_autocorr
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_corr_st3
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[19d]"></a>celt_preemphasis</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, celt_encoder.o(i.celt_preemphasis))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = celt_preemphasis
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[278]"></a>check_control_input</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, check_control_input.o(i.check_control_input))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[18c]"></a>clt_compute_allocation</STRONG> (Thumb, 988 bytes, Stack size 176 bytes, rate.o(i.clt_compute_allocation))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = clt_compute_allocation &rArr; interp_bits2pulses &rArr; ec_enc_uint &rArr; ec_encode &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[1bc]"></a>clt_mdct_backward_c</STRONG> (Thumb, 572 bytes, Stack size 64 bytes, mdct.o(i.clt_mdct_backward_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = clt_mdct_backward_c &rArr; opus_fft_impl &rArr; kf_bfly5
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_synthesis
</UL>

<P><STRONG><a name="[1bf]"></a>clt_mdct_forward_c</STRONG> (Thumb, 740 bytes, Stack size 88 bytes, mdct.o(i.clt_mdct_forward_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = clt_mdct_forward_c &rArr; opus_fft_impl &rArr; kf_bfly5
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mdcts
</UL>

<P><STRONG><a name="[190]"></a>comb_filter</STRONG> (Thumb, 594 bytes, Stack size 96 bytes, celt.o(i.comb_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = comb_filter &rArr; comb_filter_const_c
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_filter_const_c
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefilter_and_fold
</UL>

<P><STRONG><a name="[1a4]"></a>compute_band_energies</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, bands.o(i.compute_band_energies))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = compute_band_energies &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1c7]"></a>compute_stereo_width</STRONG> (Thumb, 1190 bytes, Stack size 96 bytes, opus_encoder.o(i.compute_stereo_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = compute_stereo_width &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[169]"></a>decode_pulses</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cwrs.o(i.decode_pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = decode_pulses &rArr; ec_dec_uint &rArr; ec_dec_update &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cwrsi
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
</UL>

<P><STRONG><a name="[1bb]"></a>denormalise_bands</STRONG> (Thumb, 326 bytes, Stack size 104 bytes, bands.o(i.denormalise_bands))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = denormalise_bands &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_synthesis
</UL>

<P><STRONG><a name="[8c]"></a>downmix_int</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, opus_encoder.o(i.downmix_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = downmix_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> opus_encoder.o(i.opus_encode)
</UL>
<P><STRONG><a name="[184]"></a>ec_dec_bit_logp</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, entdec.o(i.ec_dec_bit_logp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ec_dec_bit_logp &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_decode
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>

<P><STRONG><a name="[186]"></a>ec_dec_bits</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, entdec.o(i.ec_dec_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ec_dec_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_read_byte_from_end
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_fine_energy
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_energy_finalise
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_n1
</UL>

<P><STRONG><a name="[187]"></a>ec_dec_icdf</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, entdec.o(i.ec_dec_icdf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ec_dec_icdf &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_split
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_decode_pred
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_decode_mid_only
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_pulses
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_indices
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_signs
</UL>

<P><STRONG><a name="[182]"></a>ec_dec_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, entdec.o(i.ec_dec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ec_dec_init &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_read_byte
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[185]"></a>ec_dec_uint</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, entdec.o(i.ec_dec_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ec_dec_uint &rArr; ec_dec_update &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_decode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_update
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pulses
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>

<P><STRONG><a name="[1ce]"></a>ec_dec_update</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, entdec.o(i.ec_dec_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_dec_update &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_decode
</UL>

<P><STRONG><a name="[1cd]"></a>ec_decode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, entdec.o(i.ec_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[1e4]"></a>ec_decode_bin</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, entdec.o(i.ec_decode_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ec_decode_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_decode
</UL>

<P><STRONG><a name="[19c]"></a>ec_enc_bit_logp</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, entenc.o(i.ec_enc_bit_logp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ec_enc_bit_logp &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_encode
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
</UL>

<P><STRONG><a name="[1a0]"></a>ec_enc_bits</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, entenc.o(i.ec_enc_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ec_enc_bits &rArr; ec_write_byte_at_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_write_byte_at_end
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_fine_energy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_energy_finalise
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_n1
</UL>

<P><STRONG><a name="[1b1]"></a>ec_enc_done</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, entenc.o(i.ec_enc_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ec_enc_done &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_write_byte_at_end
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_carry_out
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[1a1]"></a>ec_enc_icdf</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, entenc.o(i.ec_enc_icdf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ec_enc_icdf &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_split
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_encode_pred
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_encode_mid_only
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_pulses
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_indices
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_signs
</UL>

<P><STRONG><a name="[19a]"></a>ec_enc_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, entenc.o(i.ec_enc_init))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[285]"></a>ec_enc_patch_initial_bits</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, entenc.o(i.ec_enc_patch_initial_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_enc_patch_initial_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[199]"></a>ec_enc_shrink</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, entenc.o(i.ec_enc_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ec_enc_shrink &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[19f]"></a>ec_enc_uint</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, entenc.o(i.ec_enc_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ec_enc_uint &rArr; ec_encode &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_pulses
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>

<P><STRONG><a name="[1cc]"></a>ec_encode</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, entenc.o(i.ec_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ec_encode &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[1e2]"></a>ec_encode_bin</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, entenc.o(i.ec_encode_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ec_encode_bin &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_encode
</UL>

<P><STRONG><a name="[1e3]"></a>ec_laplace_decode</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, laplace.o(i.ec_laplace_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ec_laplace_decode &rArr; ec_dec_update &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_decode_bin
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_update
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_get_freq1
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
</UL>

<P><STRONG><a name="[1e6]"></a>ec_laplace_encode</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, laplace.o(i.ec_laplace_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ec_laplace_encode &rArr; ec_encode_bin &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_get_freq1
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
</UL>

<P><STRONG><a name="[18b]"></a>ec_tell_frac</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, entcode.o(i.ec_tell_frac))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_tell_frac
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[165]"></a>encode_pulses</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cwrs.o(i.encode_pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = encode_pulses &rArr; ec_enc_uint &rArr; ec_encode &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icwrs
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[23e]"></a>encode_size</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, opus.o(i.encode_size))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
</UL>

<P><STRONG><a name="[163]"></a>exp_rotation</STRONG> (Thumb, 370 bytes, Stack size 88 bytes, vq.o(i.exp_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = exp_rotation &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation1
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[15a]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[8a]"></a>fputc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[1eb]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[212]"></a>frame_size_select</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, opus_encoder.o(i.frame_size_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = frame_size_select
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode
</UL>

<P><STRONG><a name="[ef]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_free
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_free
</UL>

<P><STRONG><a name="[247]"></a>haar1</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, bands.o(i.haar1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = haar1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_analysis
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[1ad]"></a>hysteresis_decision</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, bands.o(i.hysteresis_decision))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hysteresis_decision
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[18a]"></a>init_caps</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, celt.o(i.init_caps))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_caps
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[1f0]"></a>is_digital_silence</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, opus_encoder.o(i.is_digital_silence))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_digital_silence
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_maxabs16
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[1cf]"></a>isqrt32</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, mathops.o(i.isqrt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[156]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[1f5]"></a>log_init</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, log.o(i.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = log_init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1PeriphClk
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>main</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 29920<LI>Call Chain = main &rArr; AudioInputProcess &rArr; opus_encode &rArr; opus_encode_native &rArr; opus_encode_frame_native &rArr; silk_Encode &rArr; silk_encode_frame_FLP &rArr; silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_create
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_RCC_INIT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_PWM
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_GPIO_INIT
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812_DMA_INIT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_RCC_INIT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_NVIC_Configuration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_INIT
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_GPIO_INIT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_DMA_Configuration
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_Start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_RCC_INIT
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_I2S_INIT
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_GPIO_INIT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPEAKER_DMA_INIT
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mic_Start_Record
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_RCC_INIT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_I2S2_INIT
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_GPIO_INIT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_DMA_INIT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDeviceState
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f1]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePush
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_create
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_alloc
</UL>

<P><STRONG><a name="[1a6]"></a>normalise_bands</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, bands.o(i.normalise_bands))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = normalise_bands
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[164]"></a>op_pvq_search_c</STRONG> (Thumb, 854 bytes, Stack size 80 bytes, vq.o(i.op_pvq_search_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = op_pvq_search_c &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[1fb]"></a>opus_custom_decoder_ctl</STRONG> (Thumb, 490 bytes, Stack size 56 bytes, celt_decoder.o(i.opus_custom_decoder_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = opus_custom_decoder_ctl &rArr; opus_custom_decoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_get_size
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_init
</UL>

<P><STRONG><a name="[1fc]"></a>opus_custom_encoder_ctl</STRONG> (Thumb, 750 bytes, Stack size 48 bytes, celt_encoder.o(i.opus_custom_encoder_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = opus_custom_encoder_ctl &rArr; opus_custom_encoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_get_size
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_init_arch
</UL>

<P><STRONG><a name="[192]"></a>opus_custom_mode_create</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modes.o(i.opus_custom_mode_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = opus_custom_mode_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_get_size
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decoder_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decoder_get_size
</UL>

<P><STRONG><a name="[b3]"></a>opus_decode</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, opus_decoder.o(i.opus_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 3592<LI>Call Chain = opus_decode &rArr; opus_decode_native &rArr;  opus_decode_native (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_get_nb_samples
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDecodeProcess
</UL>

<P><STRONG><a name="[1fe]"></a>opus_decode_native</STRONG> (Thumb, 592 bytes, Stack size 192 bytes, opus_decoder.o(i.opus_decode_native))
<BR><BR>[Stack]<UL><LI>Max Depth = 3512 + In Cycle
<LI>Call Chain = opus_decode_native &rArr;  opus_decode_native (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_nb_channels
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_bandwidth
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_mode
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_pcm_soft_clip
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_parse_impl
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_samples_per_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
</UL>

<P><STRONG><a name="[1f9]"></a>opus_decoder_create</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, opus_decoder.o(i.opus_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = opus_decoder_create &rArr; opus_decoder_init &rArr; celt_decoder_init &rArr; opus_custom_decoder_init &rArr; opus_custom_decoder_ctl &rArr; opus_custom_decoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_get_size
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_free
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_alloc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>opus_decoder_get_nb_samples</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, opus_decoder.o(i.opus_decoder_get_nb_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = opus_decoder_get_nb_samples &rArr; opus_packet_get_nb_samples &rArr; opus_packet_get_samples_per_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_nb_samples
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode
</UL>

<P><STRONG><a name="[20a]"></a>opus_decoder_get_size</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, opus_decoder.o(i.opus_decoder_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = opus_decoder_get_size &rArr; celt_decoder_get_size &rArr; opus_custom_mode_create
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Get_Decoder_Size
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decoder_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_create
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_init
</UL>

<P><STRONG><a name="[20c]"></a>opus_decoder_init</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, opus_decoder.o(i.opus_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = opus_decoder_init &rArr; celt_decoder_init &rArr; opus_custom_decoder_init &rArr; opus_custom_decoder_ctl &rArr; opus_custom_decoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_get_size
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitDecoder
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Get_Decoder_Size
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_ctl
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decoder_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_create
</UL>

<P><STRONG><a name="[bb]"></a>opus_encode</STRONG> (Thumb, 166 bytes, Stack size 88 bytes, opus_encoder.o(i.opus_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 29648<LI>Call Chain = opus_encode &rArr; opus_encode_native &rArr; opus_encode_frame_native &rArr; silk_Encode &rArr; silk_encode_frame_FLP &rArr; silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_size_select
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
</UL>

<P><STRONG><a name="[213]"></a>opus_encode_native</STRONG> (Thumb, 5686 bytes, Stack size 280 bytes, opus_encoder.o(i.opus_encode_native))
<BR><BR>[Stack]<UL><LI>Max Depth = 29560<LI>Call Chain = opus_encode_native &rArr; opus_encode_frame_native &rArr; silk_Encode &rArr; silk_encode_frame_FLP &rArr; silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digital_silence
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_get_info
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis_reset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_analysis
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitEncoder
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_stereo_width
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_bitrate_to_bitrate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_toc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decide_fec
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_frame_energy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_equiv_rate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode
</UL>

<P><STRONG><a name="[1f7]"></a>opus_encoder_create</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, opus_encoder.o(i.opus_encoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = opus_encoder_create &rArr; opus_encoder_init &rArr; celt_encoder_init &rArr; opus_custom_encoder_init_arch &rArr; opus_custom_encoder_ctl &rArr; opus_custom_encoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_get_size
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_free
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>opus_encoder_ctl</STRONG> (Thumb, 1744 bytes, Stack size 152 bytes, opus_encoder.o(i.opus_encoder_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = opus_encoder_ctl &rArr; silk_InitEncoder &rArr; silk_init_encoder &rArr; silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis_reset
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitEncoder
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_bitrate_to_bitrate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>opus_encoder_get_size</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, opus_encoder.o(i.opus_encoder_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = opus_encoder_get_size &rArr; celt_encoder_get_size &rArr; opus_custom_mode_create
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Get_Encoder_Size
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_get_size
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
</UL>

<P><STRONG><a name="[22c]"></a>opus_encoder_init</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, opus_encoder.o(i.opus_encoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = opus_encoder_init &rArr; celt_encoder_init &rArr; opus_custom_encoder_init_arch &rArr; opus_custom_encoder_ctl &rArr; opus_custom_encoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitEncoder
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Get_Encoder_Size
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_get_size
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_create
</UL>

<P><STRONG><a name="[231]"></a>opus_fft_c</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, kiss_fft.o(i.opus_fft_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = opus_fft_c &rArr; opus_fft_impl &rArr; kf_bfly5
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
</UL>

<P><STRONG><a name="[1be]"></a>opus_fft_impl</STRONG> (Thumb, 270 bytes, Stack size 80 bytes, kiss_fft.o(i.opus_fft_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = opus_fft_impl &rArr; kf_bfly5
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly5
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly2
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_c
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_mdct_forward_c
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_mdct_backward_c
</UL>

<P><STRONG><a name="[236]"></a>opus_packet_extensions_count</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, extensions.o(i.opus_packet_extensions_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = opus_packet_extensions_count &rArr; skip_extension
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_extension
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
</UL>

<P><STRONG><a name="[238]"></a>opus_packet_extensions_generate</STRONG> (Thumb, 596 bytes, Stack size 56 bytes, extensions.o(i.opus_packet_extensions_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = opus_packet_extensions_generate &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
</UL>

<P><STRONG><a name="[239]"></a>opus_packet_extensions_parse</STRONG> (Thumb, 190 bytes, Stack size 60 bytes, extensions.o(i.opus_packet_extensions_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = opus_packet_extensions_parse &rArr; skip_extension
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_extension
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
</UL>

<P><STRONG><a name="[205]"></a>opus_packet_get_bandwidth</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, opus_decoder.o(i.opus_packet_get_bandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
</UL>

<P><STRONG><a name="[207]"></a>opus_packet_get_nb_channels</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, opus_decoder.o(i.opus_packet_get_nb_channels))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
</UL>

<P><STRONG><a name="[23a]"></a>opus_packet_get_nb_frames</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, opus_decoder.o(i.opus_packet_get_nb_frames))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_nb_samples
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat_impl
</UL>

<P><STRONG><a name="[20e]"></a>opus_packet_get_nb_samples</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, opus_decoder.o(i.opus_packet_get_nb_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = opus_packet_get_nb_samples &rArr; opus_packet_get_samples_per_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_nb_frames
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_samples_per_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_get_nb_samples
</UL>

<P><STRONG><a name="[206]"></a>opus_packet_get_samples_per_frame</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, opus.o(i.opus_packet_get_samples_per_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = opus_packet_get_samples_per_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_nb_samples
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_parse_impl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat_impl
</UL>

<P><STRONG><a name="[220]"></a>opus_packet_pad</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, repacketizer.o(i.opus_packet_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = opus_packet_pad &rArr; opus_packet_pad_impl &rArr; opus_repacketizer_out_range_impl &rArr; opus_packet_extensions_parse &rArr; skip_extension
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[23b]"></a>opus_packet_pad_impl</STRONG> (Thumb, 166 bytes, Stack size 744 bytes, repacketizer.o(i.opus_packet_pad_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = opus_packet_pad_impl &rArr; opus_repacketizer_out_range_impl &rArr; opus_packet_extensions_parse &rArr; skip_extension
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_out_range_impl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad
</UL>

<P><STRONG><a name="[208]"></a>opus_packet_parse_impl</STRONG> (Thumb, 662 bytes, Stack size 80 bytes, opus.o(i.opus_packet_parse_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = opus_packet_parse_impl &rArr; parse_size
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_samples_per_frame
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat_impl
</UL>

<P><STRONG><a name="[209]"></a>opus_pcm_soft_clip</STRONG> (Thumb, 1098 bytes, Stack size 96 bytes, opus.o(i.opus_pcm_soft_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = opus_pcm_soft_clip &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
</UL>

<P><STRONG><a name="[229]"></a>opus_repacketizer_cat</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, repacketizer.o(i.opus_repacketizer_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = opus_repacketizer_cat &rArr; opus_repacketizer_cat_impl &rArr; opus_packet_parse_impl &rArr; parse_size
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad_impl
</UL>

<P><STRONG><a name="[227]"></a>opus_repacketizer_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, repacketizer.o(i.opus_repacketizer_init))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad_impl
</UL>

<P><STRONG><a name="[22a]"></a>opus_repacketizer_out_range_impl</STRONG> (Thumb, 1320 bytes, Stack size 96 bytes, repacketizer.o(i.opus_repacketizer_out_range_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = opus_repacketizer_out_range_impl &rArr; opus_packet_extensions_parse &rArr; skip_extension
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_size
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_extensions_parse
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_extensions_generate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_extensions_count
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad_impl
</UL>

<P><STRONG><a name="[f2]"></a>perror</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, perror.o(i.perror))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = perror &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePush
</UL>

<P><STRONG><a name="[1b9]"></a>pitch_downsample</STRONG> (Thumb, 550 bytes, Stack size 104 bytes, pitch.o(i.pitch_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pitch_downsample &rArr; _celt_autocorr &rArr; celt_pitch_xcorr_c &rArr; xcorr_kernel_c
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_lpc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_autocorr
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_fir5
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_plc_pitch_search
</UL>

<P><STRONG><a name="[1ba]"></a>pitch_search</STRONG> (Thumb, 518 bytes, Stack size 80 bytes, pitch.o(i.pitch_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pitch_search &rArr; celt_pitch_xcorr_c &rArr; xcorr_kernel_c
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_c
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_best_pitch
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_plc_pitch_search
</UL>

<P><STRONG><a name="[18e]"></a>quant_all_bands</STRONG> (Thumb, 3996 bytes, Stack size 1784 bytes, bands.o(i.quant_all_bands))
<BR><BR>[Stack]<UL><LI>Max Depth = 2640<LI>Call Chain = quant_all_bands &rArr; quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_hybrid_folding
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_channel_weights
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sudiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[1a9]"></a>quant_coarse_energy</STRONG> (Thumb, 984 bytes, Stack size 256 bytes, quant_bands.o(i.quant_coarse_energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = quant_coarse_energy &rArr; quant_coarse_energy_impl &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loss_distortion
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1b0]"></a>quant_energy_finalise</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, quant_bands.o(i.quant_energy_finalise))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = quant_energy_finalise &rArr; ec_enc_bits &rArr; ec_write_byte_at_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1af]"></a>quant_fine_energy</STRONG> (Thumb, 302 bytes, Stack size 80 bytes, quant_bands.o(i.quant_fine_energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = quant_fine_energy &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[24f]"></a>remove_doubling</STRONG> (Thumb, 1128 bytes, Stack size 152 bytes, pitch.o(i.remove_doubling))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = remove_doubling &rArr; compute_pitch_gain &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dual_inner_prod_c
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pitch_gain
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_prefilter
</UL>

<P><STRONG><a name="[176]"></a>renormalise_vector</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, vq.o(i.renormalise_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = renormalise_vector &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[196]"></a>resampling_factor</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, celt.o(i.resampling_factor))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decoder_init
</UL>

<P><STRONG><a name="[221]"></a>run_analysis</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, analysis.o(i.run_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 2604<LI>Call Chain = run_analysis &rArr; tonality_analysis &rArr; analysis_compute_gru &rArr; gemm_accum
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_get_info
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[254]"></a>silk_A2NLSF</STRONG> (Thumb, 568 bytes, Stack size 200 bytes, a2nlsf.o(i.silk_A2NLSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = silk_A2NLSF &rArr; silk_A2NLSF_init &rArr; silk_A2NLSF_trans_poly
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander_32
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF_eval_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF_FLP
</UL>

<P><STRONG><a name="[258]"></a>silk_A2NLSF_FLP</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, wrappers_flp.o(i.silk_A2NLSF_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = silk_A2NLSF_FLP &rArr; silk_A2NLSF &rArr; silk_A2NLSF_init &rArr; silk_A2NLSF_trans_poly
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
</UL>

<P><STRONG><a name="[25f]"></a>silk_CNG</STRONG> (Thumb, 2234 bytes, Stack size 96 bytes, cng.o(i.silk_CNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = silk_CNG &rArr; silk_NLSF2A &rArr; silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG_Reset
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_SQRT_APPROX
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG_exc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
</UL>

<P><STRONG><a name="[260]"></a>silk_CNG_Reset</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, cng.o(i.silk_CNG_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = silk_CNG_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_reset_decoder
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG
</UL>

<P><STRONG><a name="[201]"></a>silk_Decode</STRONG> (Thumb, 2418 bytes, Stack size 760 bytes, dec_api.o(i.silk_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = silk_Decode &rArr; silk_decode_frame &rArr; silk_decode_parameters &rArr; silk_NLSF2A &rArr; silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_decode_pred
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_decode_mid_only
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_MS_to_LR
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_decoder
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decoder_set_fs
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_pulses
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_indices
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
</UL>

<P><STRONG><a name="[21b]"></a>silk_Encode</STRONG> (Thumb, 4206 bytes, Stack size 160 bytes, enc_api.o(i.silk_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 29072<LI>Call Chain = silk_Encode &rArr; silk_encode_frame_FLP &rArr; silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_encode_pred
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_encode_mid_only
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_LR_to_MS
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_encoder
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_pulses
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_indices
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_do_VAD_FLP
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_control_encoder
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_control_SNR
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_HP_variable_cutoff
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_control_input
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_patch_initial_bits
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[20f]"></a>silk_Get_Decoder_Size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dec_api.o(i.silk_Get_Decoder_Size))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_get_size
</UL>

<P><STRONG><a name="[22e]"></a>silk_Get_Encoder_Size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, enc_api.o(i.silk_Get_Encoder_Size))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_get_size
</UL>

<P><STRONG><a name="[280]"></a>silk_HP_variable_cutoff</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, hp_variable_cutoff.o(i.silk_HP_variable_cutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = silk_HP_variable_cutoff &rArr; silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[211]"></a>silk_InitDecoder</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dec_api.o(i.silk_InitDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = silk_InitDecoder &rArr; silk_init_decoder &rArr; silk_reset_decoder &rArr; silk_CNG_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_decoder
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LoadOSCEModels
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_init
</UL>

<P><STRONG><a name="[225]"></a>silk_InitEncoder</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, enc_api.o(i.silk_InitEncoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = silk_InitEncoder &rArr; silk_init_encoder &rArr; silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_encoder
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_QueryEncoder
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[28f]"></a>silk_LPC_analysis_filter</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, lpc_analysis_filter.o(i.silk_LPC_analysis_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_LPC_analysis_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_c
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_core
</UL>

<P><STRONG><a name="[290]"></a>silk_LPC_analysis_filter_FLP</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lpc_analysis_filter_flp.o(i.silk_LPC_analysis_filter_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = silk_LPC_analysis_filter_FLP &rArr; silk_LPC_analysis_filter8_FLP
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter8_FLP
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter6_FLP
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter16_FLP
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter12_FLP
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter10_FLP
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_residual_energy_FLP
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
</UL>

<P><STRONG><a name="[296]"></a>silk_LPC_fit</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, lpc_fit.o(i.silk_LPC_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = silk_LPC_fit &rArr; silk_bwexpander_32
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander_32
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A
</UL>

<P><STRONG><a name="[297]"></a>silk_LPC_inverse_pred_gain_c</STRONG> (Thumb, 60 bytes, Stack size 120 bytes, lpc_inv_pred_gain.o(i.silk_LPC_inverse_pred_gain_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_inverse_pred_gain_QA_c
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A
</UL>

<P><STRONG><a name="[298]"></a>silk_LP_variable_cutoff</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, lp_variable_cutoff.o(i.silk_LP_variable_cutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = silk_LP_variable_cutoff &rArr; silk_biquad_alt_stride1
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LP_interpolate_filter_taps
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_biquad_alt_stride1
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[2f0]"></a>silk_LTP_analysis_filter_FLP</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, ltp_analysis_filter_flp.o(i.silk_LTP_analysis_filter_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_LTP_analysis_filter_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[29b]"></a>silk_LTP_scale_ctrl_FLP</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ltp_scale_ctrl_flp.o(i.silk_LTP_scale_ctrl_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = silk_LTP_scale_ctrl_FLP &rArr; silk_log2lin
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2lin
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[28a]"></a>silk_LoadOSCEModels</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dec_api.o(i.silk_LoadOSCEModels))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitDecoder
</UL>

<P><STRONG><a name="[263]"></a>silk_NLSF2A</STRONG> (Thumb, 282 bytes, Stack size 368 bytes, nlsf2a.o(i.silk_NLSF2A))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = silk_NLSF2A &rArr; silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander_32
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A_find_poly
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_inverse_pred_gain_c
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_fit
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_NLSFs
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A_FLP
</UL>

<P><STRONG><a name="[29d]"></a>silk_NLSF2A_FLP</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, wrappers_flp.o(i.silk_NLSF2A_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = silk_NLSF2A_FLP &rArr; silk_NLSF2A &rArr; silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
</UL>

<P><STRONG><a name="[2a7]"></a>silk_NLSF_VQ</STRONG> (Thumb, 156 bytes, Stack size 52 bytes, nlsf_vq.o(i.silk_NLSF_VQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = silk_NLSF_VQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
</UL>

<P><STRONG><a name="[29e]"></a>silk_NLSF_VQ_weights_laroia</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, nlsf_vq_weights_laroia.o(i.silk_NLSF_VQ_weights_laroia))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = silk_NLSF_VQ_weights_laroia
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_min_int
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_max_int
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_NLSFs
</UL>

<P><STRONG><a name="[2a1]"></a>silk_NLSF_decode</STRONG> (Thumb, 158 bytes, Stack size 120 bytes, nlsf_decode.o(i.silk_NLSF_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = silk_NLSF_decode &rArr; silk_NLSF_stabilize &rArr; silk_insertion_sort_increasing_all_values_int16
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_stabilize
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_residual_dequant
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
</UL>

<P><STRONG><a name="[2a5]"></a>silk_NLSF_del_dec_quant</STRONG> (Thumb, 1020 bytes, Stack size 416 bytes, nlsf_del_dec_quant.o(i.silk_NLSF_del_dec_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = silk_NLSF_del_dec_quant &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
</UL>

<P><STRONG><a name="[2a6]"></a>silk_NLSF_encode</STRONG> (Thumb, 560 bytes, Stack size 264 bytes, nlsf_encode.o(i.silk_NLSF_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = silk_NLSF_encode &rArr; silk_NLSF_del_dec_quant &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_insertion_sort_increasing
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_VQ
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_del_dec_quant
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_stabilize
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_decode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_unpack
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_NLSFs
</UL>

<P><STRONG><a name="[2a4]"></a>silk_NLSF_stabilize</STRONG> (Thumb, 680 bytes, Stack size 56 bytes, nlsf_stabilize.o(i.silk_NLSF_stabilize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = silk_NLSF_stabilize &rArr; silk_insertion_sort_increasing_all_values_int16
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_insertion_sort_increasing_all_values_int16
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_min_int
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_max_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_decode
</UL>

<P><STRONG><a name="[2a2]"></a>silk_NLSF_unpack</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nlsf_unpack.o(i.silk_NLSF_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = silk_NLSF_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_indices
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_indices
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_decode
</UL>

<P><STRONG><a name="[2ac]"></a>silk_NSQ_c</STRONG> (Thumb, 750 bytes, Stack size 160 bytes, nsq.o(i.silk_NSQ_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = silk_NSQ_c &rArr; silk_noise_shape_quantizer &rArr; silk_NSQ_noise_shape_feedback_loop_c
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_nsq_scale_states
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_wrapper_FLP
</UL>

<P><STRONG><a name="[2af]"></a>silk_NSQ_del_dec_c</STRONG> (Thumb, 2276 bytes, Stack size 224 bytes, nsq_del_dec.o(i.silk_NSQ_del_dec_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = silk_NSQ_del_dec_c &rArr; silk_noise_shape_quantizer_del_dec &rArr; silk_noise_shape_quantizer_short_prediction_c
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_nsq_del_dec_scale_states
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer_del_dec
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_min_int
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_wrapper_FLP
</UL>

<P><STRONG><a name="[28e]"></a>silk_NSQ_wrapper_FLP</STRONG> (Thumb, 658 bytes, Stack size 1096 bytes, wrappers_flp.o(i.silk_NSQ_wrapper_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = silk_NSQ_wrapper_FLP &rArr; silk_NSQ_del_dec_c &rArr; silk_noise_shape_quantizer_del_dec &rArr; silk_noise_shape_quantizer_short_prediction_c
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_c
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2int
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LBRR_encode_FLP
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[2b3]"></a>silk_PLC</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, plc.o(i.silk_PLC))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = silk_PLC &rArr; silk_PLC_conceal &rArr; silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_update
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
</UL>

<P><STRONG><a name="[2b4]"></a>silk_PLC_Reset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, plc.o(i.silk_PLC_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_reset_decoder
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC
</UL>

<P><STRONG><a name="[2be]"></a>silk_PLC_glue_frames</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, plc.o(i.silk_PLC_glue_frames))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = silk_PLC_glue_frames &rArr; silk_sum_sqr_shift
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_sum_sqr_shift
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_max_32
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ_FRAC
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
</UL>

<P><STRONG><a name="[200]"></a>silk_ResetDecoder</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dec_api.o(i.silk_ResetDecoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = silk_ResetDecoder &rArr; silk_reset_decoder &rArr; silk_CNG_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_reset_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
</UL>

<P><STRONG><a name="[2c7]"></a>silk_VAD_GetSA_Q8_c</STRONG> (Thumb, 1352 bytes, Stack size 160 bytes, vad.o(i.silk_VAD_GetSA_Q8_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = silk_VAD_GetSA_Q8_c &rArr; silk_SQRT_APPROX &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_min_int
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_GetNoiseLevels
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_SQRT_APPROX
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_sigm_Q15
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_ana_filt_bank_1
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_do_VAD_FLP
</UL>

<P><STRONG><a name="[2cc]"></a>silk_VAD_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, vad.o(i.silk_VAD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_VAD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_encoder
</UL>

<P><STRONG><a name="[2cd]"></a>silk_VQ_WMat_EC_c</STRONG> (Thumb, 498 bytes, Stack size 88 bytes, vq_wmat_ec.o(i.silk_VQ_WMat_EC_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = silk_VQ_WMat_EC_c &rArr; silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_quant_LTP_gains
</UL>

<P><STRONG><a name="[2c8]"></a>silk_ana_filt_bank_1</STRONG> (Thumb, 334 bytes, Stack size 36 bytes, ana_filt_bank_1.o(i.silk_ana_filt_bank_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = silk_ana_filt_bank_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_GetSA_Q8_c
</UL>

<P><STRONG><a name="[2eb]"></a>silk_apply_sine_window_FLP</STRONG> (Thumb, 216 bytes, Stack size 12 bytes, apply_sine_window_flp.o(i.silk_apply_sine_window_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = silk_apply_sine_window_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
</UL>

<P><STRONG><a name="[2ce]"></a>silk_autocorrelation_FLP</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, autocorrelation_flp.o(i.silk_autocorrelation_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = silk_autocorrelation_FLP &rArr; silk_inner_product_FLP_c &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_product_FLP_c
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
</UL>

<P><STRONG><a name="[29a]"></a>silk_biquad_alt_stride1</STRONG> (Thumb, 388 bytes, Stack size 36 bytes, biquad_alt.o(i.silk_biquad_alt_stride1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = silk_biquad_alt_stride1
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LP_variable_cutoff
</UL>

<P><STRONG><a name="[2d0]"></a>silk_burg_modified_FLP</STRONG> (Thumb, 2382 bytes, Stack size 1144 bytes, burg_modified_flp.o(i.silk_burg_modified_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = silk_burg_modified_FLP &rArr; silk_inner_product_FLP_c &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_product_FLP_c
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
</UL>

<P><STRONG><a name="[2ba]"></a>silk_bwexpander</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bwexpander.o(i.silk_bwexpander))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_bwexpander
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
</UL>

<P><STRONG><a name="[257]"></a>silk_bwexpander_32</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, bwexpander_32.o(i.silk_bwexpander_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_bwexpander_32
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_fit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A
</UL>

<P><STRONG><a name="[1f4]"></a>silk_bwexpander_FLP</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bwexpander_flp.o(i.silk_bwexpander_FLP))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warped_true2monic_coefs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_coefs
</UL>

<P><STRONG><a name="[283]"></a>silk_control_SNR</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, control_snr.o(i.silk_control_SNR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_control_SNR
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[2d2]"></a>silk_control_audio_bandwidth</STRONG> (Thumb, 384 bytes, Stack size 20 bytes, control_audio_bandwidth.o(i.silk_control_audio_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_control_audio_bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_control_encoder
</UL>

<P><STRONG><a name="[27a]"></a>silk_control_encoder</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, control_codec.o(i.silk_control_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = silk_control_encoder &rArr; silk_setup_resamplers &rArr; silk_float2short_array &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_setup_resamplers
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_setup_fs
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_setup_complexity
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_control_audio_bandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[2d5]"></a>silk_corrMatrix_FLP</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, corrmatrix_flp.o(i.silk_corrMatrix_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = silk_corrMatrix_FLP &rArr; silk_inner_product_FLP_c &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_product_FLP_c
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LTP_FLP
</UL>

<P><STRONG><a name="[2d6]"></a>silk_corrVector_FLP</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, corrmatrix_flp.o(i.silk_corrVector_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = silk_corrVector_FLP &rArr; silk_inner_product_FLP_c &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_product_FLP_c
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LTP_FLP
</UL>

<P><STRONG><a name="[2d7]"></a>silk_decode_core</STRONG> (Thumb, 2586 bytes, Stack size 168 bytes, decode_core.o(i.silk_decode_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = silk_decode_core &rArr; silk_LPC_analysis_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
</UL>

<P><STRONG><a name="[275]"></a>silk_decode_frame</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, decode_frame.o(i.silk_decode_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = silk_decode_frame &rArr; silk_decode_parameters &rArr; silk_NLSF2A &rArr; silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_pulses
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_indices
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_glue_frames
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_core
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
</UL>

<P><STRONG><a name="[273]"></a>silk_decode_indices</STRONG> (Thumb, 630 bytes, Stack size 104 bytes, decode_indices.o(i.silk_decode_indices))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = silk_decode_indices &rArr; ec_dec_icdf &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
</UL>

<P><STRONG><a name="[2d8]"></a>silk_decode_parameters</STRONG> (Thumb, 424 bytes, Stack size 104 bytes, decode_parameters.o(i.silk_decode_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = silk_decode_parameters &rArr; silk_NLSF2A &rArr; silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_dequant
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_pitch
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_decode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
</UL>

<P><STRONG><a name="[2d9]"></a>silk_decode_pitch</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, decode_pitch.o(i.silk_decode_pitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = silk_decode_pitch
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
</UL>

<P><STRONG><a name="[274]"></a>silk_decode_pulses</STRONG> (Thumb, 346 bytes, Stack size 240 bytes, decode_pulses.o(i.silk_decode_pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = silk_decode_pulses &rArr; silk_shell_decoder &rArr; decode_split &rArr; ec_dec_icdf &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_shell_decoder
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_signs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_frame
</UL>

<P><STRONG><a name="[2db]"></a>silk_decode_signs</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, code_signs.o(i.silk_decode_signs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = silk_decode_signs &rArr; ec_dec_icdf &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_pulses
</UL>

<P><STRONG><a name="[270]"></a>silk_decoder_set_fs</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, decoder_set_fs.o(i.silk_decoder_set_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = silk_decoder_set_fs &rArr; silk_resampler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
</UL>

<P><STRONG><a name="[282]"></a>silk_encode_do_VAD_FLP</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, encode_frame_flp.o(i.silk_encode_do_VAD_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = silk_encode_do_VAD_FLP &rArr; silk_VAD_GetSA_Q8_c &rArr; silk_SQRT_APPROX &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_GetSA_Q8_c
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[284]"></a>silk_encode_frame_FLP</STRONG> (Thumb, 2228 bytes, Stack size 13752 bytes, encode_frame_flp.o(i.silk_encode_frame_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28912<LI>Call Chain = silk_encode_frame_FLP &rArr; silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_wrapper_FLP
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LBRR_encode_FLP
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_pulses
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_indices
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LP_variable_cutoff
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_quant
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_ID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[27e]"></a>silk_encode_indices</STRONG> (Thumb, 726 bytes, Stack size 112 bytes, encode_indices.o(i.silk_encode_indices))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = silk_encode_indices &rArr; ec_enc_icdf &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[27f]"></a>silk_encode_pulses</STRONG> (Thumb, 900 bytes, Stack size 144 bytes, encode_pulses.o(i.silk_encode_pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = silk_encode_pulses &rArr; silk_shell_encoder &rArr; encode_split &rArr; ec_enc_icdf &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_shell_encoder
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_and_check
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_signs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[2e6]"></a>silk_encode_signs</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, code_signs.o(i.silk_encode_signs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = silk_encode_signs &rArr; ec_enc_icdf &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_pulses
</UL>

<P><STRONG><a name="[2c1]"></a>silk_energy_FLP</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, energy_flp.o(i.silk_energy_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrMatrix_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_energy_st3
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_residual_energy_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LTP_FLP
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
</UL>

<P><STRONG><a name="[2e7]"></a>silk_find_LPC_FLP</STRONG> (Thumb, 428 bytes, Stack size 1776 bytes, find_lpc_flp.o(i.silk_find_LPC_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112<LI>Call Chain = silk_find_LPC_FLP &rArr; silk_burg_modified_FLP &rArr; silk_inner_product_FLP_c &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_interpolate
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A_FLP
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[2e9]"></a>silk_find_LTP_FLP</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, find_ltp_flp.o(i.silk_find_LTP_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = silk_find_LTP_FLP &rArr; silk_corrMatrix_FLP &rArr; silk_inner_product_FLP_c &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrVector_FLP
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrMatrix_FLP
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_scale_vector_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[2dd]"></a>silk_find_pitch_lags_FLP</STRONG> (Thumb, 712 bytes, Stack size 1816 bytes, find_pitch_lags_flp.o(i.silk_find_pitch_lags_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 15160<LI>Call Chain = silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander_FLP
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_autocorrelation_FLP
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_apply_sine_window_FLP
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_schur_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_k2a_FLP
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[2df]"></a>silk_find_pred_coefs_FLP</STRONG> (Thumb, 614 bytes, Stack size 2152 bytes, find_pred_coefs_flp.o(i.silk_find_pred_coefs_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 5264<LI>Call Chain = silk_find_pred_coefs_FLP &rArr; silk_find_LPC_FLP &rArr; silk_burg_modified_FLP &rArr; silk_inner_product_FLP_c &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_scale_copy_vector_FLP
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_residual_energy_FLP
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_quant_LTP_gains_FLP
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_NLSFs_FLP
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LTP_scale_ctrl_FLP
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LTP_analysis_filter_FLP
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LTP_FLP
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[2e1]"></a>silk_gains_ID</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gain_quant.o(i.silk_gains_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = silk_gains_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[28d]"></a>silk_gains_dequant</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, gain_quant.o(i.silk_gains_dequant))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = silk_gains_dequant &rArr; silk_log2lin
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2lin
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_min_32
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LBRR_encode_FLP
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_parameters
</UL>

<P><STRONG><a name="[2e3]"></a>silk_gains_quant</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, gain_quant.o(i.silk_gains_quant))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = silk_gains_quant &rArr; silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2lin
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_min_32
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_gains_FLP
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[26f]"></a>silk_init_decoder</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, init_decoder.o(i.silk_init_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = silk_init_decoder &rArr; silk_reset_decoder &rArr; silk_CNG_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_reset_decoder
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitDecoder
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
</UL>

<P><STRONG><a name="[279]"></a>silk_init_encoder</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, init_encoder.o(i.silk_init_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = silk_init_encoder &rArr; silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitEncoder
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[30f]"></a>silk_inner_prod_aligned_scale</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, inner_prod_aligned.o(i.silk_inner_prod_aligned_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_inner_prod_aligned_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_find_predictor
</UL>

<P><STRONG><a name="[2cf]"></a>silk_inner_product_FLP_c</STRONG> (Thumb, 432 bytes, Stack size 104 bytes, inner_product_flp.o(i.silk_inner_product_FLP_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = silk_inner_product_FLP_c &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrVector_FLP
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_corrMatrix_FLP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_burg_modified_FLP
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_autocorrelation_FLP
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[301]"></a>silk_insertion_sort_decreasing_FLP</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, sort_flp.o(i.silk_insertion_sort_decreasing_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_insertion_sort_decreasing_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[2a8]"></a>silk_insertion_sort_increasing</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, sort.o(i.silk_insertion_sort_increasing))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_insertion_sort_increasing
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
</UL>

<P><STRONG><a name="[2a9]"></a>silk_insertion_sort_increasing_all_values_int16</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sort.o(i.silk_insertion_sort_increasing_all_values_int16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_insertion_sort_increasing_all_values_int16
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_stabilize
</UL>

<P><STRONG><a name="[2e8]"></a>silk_interpolate</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, interpolate.o(i.silk_interpolate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_interpolate
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_NLSFs
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LPC_FLP
</UL>

<P><STRONG><a name="[2ed]"></a>silk_k2a_FLP</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, k2a_flp.o(i.silk_k2a_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = silk_k2a_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
</UL>

<P><STRONG><a name="[216]"></a>silk_lin2log</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lin2log.o(i.silk_lin2log))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ_FRAC
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_GetSA_Q8_c
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VQ_WMat_EC_c
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_quant_LTP_gains
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_encoder
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_HP_variable_cutoff
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_quant
</UL>

<P><STRONG><a name="[217]"></a>silk_log2lin</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, log2lin.o(i.silk_log2lin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = silk_log2lin
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_quant_LTP_gains
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_quant
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_dequant
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LTP_scale_ctrl_FLP
</UL>

<P><STRONG><a name="[2de]"></a>silk_noise_shape_analysis_FLP</STRONG> (Thumb, 2056 bytes, Stack size 1312 bytes, noise_shape_analysis_flp.o(i.silk_noise_shape_analysis_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = silk_noise_shape_analysis_FLP &rArr; silk_warped_autocorrelation_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander_FLP
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_autocorrelation_FLP
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_apply_sine_window_FLP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_warped_autocorrelation_FLP
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warped_true2monic_coefs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_coefs
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_schur_FLP
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_k2a_FLP
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[2ee]"></a>silk_pitch_analysis_core_FLP</STRONG> (Thumb, 6594 bytes, Stack size 12960 bytes, pitch_analysis_core_flp.o(i.silk_pitch_analysis_core_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 13344<LI>Call Chain = silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_product_FLP_c
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_down2_3
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_down2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_c
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_insertion_sort_decreasing_FLP
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_short2float_array
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_energy_st3
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_P_Ana_calc_corr_st3
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
</UL>

<P><STRONG><a name="[302]"></a>silk_process_NLSFs</STRONG> (Thumb, 348 bytes, Stack size 144 bytes, process_nlsfs.o(i.silk_process_NLSFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = silk_process_NLSFs &rArr; silk_NLSF_encode &rArr; silk_NLSF_del_dec_quant &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_VQ_weights_laroia
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_interpolate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_NLSFs_FLP
</UL>

<P><STRONG><a name="[2f2]"></a>silk_process_NLSFs_FLP</STRONG> (Thumb, 96 bytes, Stack size 96 bytes, wrappers_flp.o(i.silk_process_NLSFs_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = silk_process_NLSFs_FLP &rArr; silk_process_NLSFs &rArr; silk_NLSF_encode &rArr; silk_NLSF_del_dec_quant &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_process_NLSFs
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[2e0]"></a>silk_process_gains_FLP</STRONG> (Thumb, 770 bytes, Stack size 104 bytes, process_gains_flp.o(i.silk_process_gains_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = silk_process_gains_FLP &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_quant
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[303]"></a>silk_quant_LTP_gains</STRONG> (Thumb, 394 bytes, Stack size 136 bytes, quant_ltp_gains.o(i.silk_quant_LTP_gains))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = silk_quant_LTP_gains &rArr; silk_VQ_WMat_EC_c &rArr; silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VQ_WMat_EC_c
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2lin
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_quant_LTP_gains_FLP
</UL>

<P><STRONG><a name="[2ef]"></a>silk_quant_LTP_gains_FLP</STRONG> (Thumb, 222 bytes, Stack size 600 bytes, wrappers_flp.o(i.silk_quant_LTP_gains_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = silk_quant_LTP_gains_FLP &rArr; silk_quant_LTP_gains &rArr; silk_VQ_WMat_EC_c &rArr; silk_lin2log &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_quant_LTP_gains
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2int
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[277]"></a>silk_resampler</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, resampler.o(i.silk_resampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = silk_resampler &rArr; silk_resampler_private_down_FIR &rArr; silk_resampler_private_down_FIR_INTERPOL
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_up2_HQ_wrapper
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_down_FIR
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_IIR_FIR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_setup_resamplers
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
</UL>

<P><STRONG><a name="[2fe]"></a>silk_resampler_down2</STRONG> (Thumb, 222 bytes, Stack size 36 bytes, resampler_down2.o(i.silk_resampler_down2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = silk_resampler_down2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[300]"></a>silk_resampler_down2_3</STRONG> (Thumb, 498 bytes, Stack size 64 bytes, resampler_down2_3.o(i.silk_resampler_down2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = silk_resampler_down2_3 &rArr; silk_resampler_private_AR2
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_AR2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[2dc]"></a>silk_resampler_init</STRONG> (Thumb, 652 bytes, Stack size 24 bytes, resampler.o(i.silk_resampler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = silk_resampler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_setup_resamplers
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decoder_set_fs
</UL>

<P><STRONG><a name="[307]"></a>silk_resampler_private_AR2</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, resampler_private_ar2.o(i.silk_resampler_private_AR2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = silk_resampler_private_AR2
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_down2_3
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_down_FIR
</UL>

<P><STRONG><a name="[305]"></a>silk_resampler_private_IIR_FIR</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, resampler_private_iir_fir.o(i.silk_resampler_private_IIR_FIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = silk_resampler_private_IIR_FIR &rArr; silk_resampler_private_up2_HQ
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_up2_HQ
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_IIR_FIR_INTERPOL
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler
</UL>

<P><STRONG><a name="[306]"></a>silk_resampler_private_down_FIR</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, resampler_private_down_fir.o(i.silk_resampler_private_down_FIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = silk_resampler_private_down_FIR &rArr; silk_resampler_private_down_FIR_INTERPOL
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_down_FIR_INTERPOL
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_AR2
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler
</UL>

<P><STRONG><a name="[308]"></a>silk_resampler_private_up2_HQ</STRONG> (Thumb, 522 bytes, Stack size 36 bytes, resampler_private_up2_hq.o(i.silk_resampler_private_up2_HQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = silk_resampler_private_up2_HQ
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_up2_HQ_wrapper
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_IIR_FIR
</UL>

<P><STRONG><a name="[304]"></a>silk_resampler_private_up2_HQ_wrapper</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, resampler_private_up2_hq.o(i.silk_resampler_private_up2_HQ_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = silk_resampler_private_up2_HQ_wrapper &rArr; silk_resampler_private_up2_HQ
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_up2_HQ
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler
</UL>

<P><STRONG><a name="[2c2]"></a>silk_reset_decoder</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, init_decoder.o(i.silk_reset_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_reset_decoder &rArr; silk_CNG_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_Reset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG_Reset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_ResetDecoder
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_init_decoder
</UL>

<P><STRONG><a name="[2f3]"></a>silk_residual_energy_FLP</STRONG> (Thumb, 326 bytes, Stack size 832 bytes, residual_energy_flp.o(i.silk_residual_energy_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = silk_residual_energy_FLP &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[2f1]"></a>silk_scale_copy_vector_FLP</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, scale_copy_vector_flp.o(i.silk_scale_copy_vector_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = silk_scale_copy_vector_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pred_coefs_FLP
</UL>

<P><STRONG><a name="[2ea]"></a>silk_scale_vector_FLP</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, scale_vector_flp.o(i.silk_scale_vector_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = silk_scale_vector_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_LTP_FLP
</UL>

<P><STRONG><a name="[2ec]"></a>silk_schur_FLP</STRONG> (Thumb, 334 bytes, Stack size 464 bytes, schur_flp.o(i.silk_schur_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = silk_schur_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_find_pitch_lags_FLP
</UL>

<P><STRONG><a name="[2da]"></a>silk_shell_decoder</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, shell_coder.o(i.silk_shell_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = silk_shell_decoder &rArr; decode_split &rArr; ec_dec_icdf &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_split
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_pulses
</UL>

<P><STRONG><a name="[2e5]"></a>silk_shell_encoder</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, shell_coder.o(i.silk_shell_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = silk_shell_encoder &rArr; encode_split &rArr; ec_enc_icdf &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_split
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combine_pulses
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_pulses
</UL>

<P><STRONG><a name="[2cb]"></a>silk_sigm_Q15</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sigm_q15.o(i.silk_sigm_Q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = silk_sigm_Q15
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_GetSA_Q8_c
</UL>

<P><STRONG><a name="[281]"></a>silk_stereo_LR_to_MS</STRONG> (Thumb, 2070 bytes, Stack size 152 bytes, stereo_lr_to_ms.o(i.silk_stereo_LR_to_MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = silk_stereo_LR_to_MS &rArr; silk_stereo_find_predictor &rArr; silk_SQRT_APPROX &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_quant_pred
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_find_predictor
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[276]"></a>silk_stereo_MS_to_LR</STRONG> (Thumb, 700 bytes, Stack size 44 bytes, stereo_ms_to_lr.o(i.silk_stereo_MS_to_LR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = silk_stereo_MS_to_LR
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
</UL>

<P><STRONG><a name="[272]"></a>silk_stereo_decode_mid_only</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stereo_decode_pred.o(i.silk_stereo_decode_mid_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = silk_stereo_decode_mid_only &rArr; ec_dec_icdf &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
</UL>

<P><STRONG><a name="[271]"></a>silk_stereo_decode_pred</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, stereo_decode_pred.o(i.silk_stereo_decode_pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = silk_stereo_decode_pred &rArr; ec_dec_icdf &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
</UL>

<P><STRONG><a name="[27d]"></a>silk_stereo_encode_mid_only</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stereo_encode_pred.o(i.silk_stereo_encode_mid_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = silk_stereo_encode_mid_only &rArr; ec_enc_icdf &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[27c]"></a>silk_stereo_encode_pred</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stereo_encode_pred.o(i.silk_stereo_encode_pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = silk_stereo_encode_pred &rArr; ec_enc_icdf &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[30c]"></a>silk_stereo_find_predictor</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, stereo_find_predictor.o(i.silk_stereo_find_predictor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = silk_stereo_find_predictor &rArr; silk_SQRT_APPROX &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_max_int
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_SQRT_APPROX
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_sum_sqr_shift
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_inner_prod_aligned_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_LR_to_MS
</UL>

<P><STRONG><a name="[30d]"></a>silk_stereo_quant_pred</STRONG> (Thumb, 280 bytes, Stack size 36 bytes, stereo_quant_pred.o(i.silk_stereo_quant_pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = silk_stereo_quant_pred
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_LR_to_MS
</UL>

<P><STRONG><a name="[2bd]"></a>silk_sum_sqr_shift</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, sum_sqr_shift.o(i.silk_sum_sqr_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_sum_sqr_shift
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_find_predictor
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_energy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_glue_frames
</UL>

<P><STRONG><a name="[2f9]"></a>silk_warped_autocorrelation_FLP</STRONG> (Thumb, 610 bytes, Stack size 488 bytes, warped_autocorrelation_flp.o(i.silk_warped_autocorrelation_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = silk_warped_autocorrelation_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
</UL>

<P><STRONG><a name="[237]"></a>skip_extension</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, extensions.o(i.skip_extension))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skip_extension
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_extensions_parse
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_extensions_count
</UL>

<P><STRONG><a name="[1ab]"></a>spreading_decision</STRONG> (Thumb, 548 bytes, Stack size 88 bytes, bands.o(i.spreading_decision))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spreading_decision
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[159]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c9]"></a>stereo_itheta</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, vq.o(i.stereo_itheta))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = stereo_itheta &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan2f
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[ae]"></a>systick_delay_ms</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, delay.o(i.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = systick_delay_ms &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioInputProcess
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_INIT
</UL>

<P><STRONG><a name="[140]"></a>systick_delay_us</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, delay.o(i.systick_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = systick_delay_us &rArr; RCC_GetClocksFreqValue &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsSend_WaitTimeOut
</UL>

<P><STRONG><a name="[230]"></a>tonality_analysis_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, analysis.o(i.tonality_analysis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tonality_analysis_init &rArr; tonality_analysis_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
</UL>

<P><STRONG><a name="[222]"></a>tonality_analysis_reset</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, analysis.o(i.tonality_analysis_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tonality_analysis_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[228]"></a>tonality_get_info</STRONG> (Thumb, 1366 bytes, Stack size 88 bytes, analysis.o(i.tonality_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tonality_get_info &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_analysis
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[188]"></a>unquant_coarse_energy</STRONG> (Thumb, 392 bytes, Stack size 88 bytes, quant_bands.o(i.unquant_coarse_energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = unquant_coarse_energy &rArr; ec_laplace_decode &rArr; ec_dec_update &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[18f]"></a>unquant_energy_finalise</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, quant_bands.o(i.unquant_energy_finalise))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unquant_energy_finalise &rArr; ec_dec_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[18d]"></a>unquant_fine_energy</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, quant_bands.o(i.unquant_fine_energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unquant_fine_energy &rArr; ec_dec_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[107]"></a>SetStartupVolt</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, system_n32h47x_48x.o(i.SetStartupVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetStartupVolt
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[106]"></a>SetSysClock</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, system_n32h47x_48x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[312]"></a>DBG_SysTick_Config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.DBG_SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>

<P><STRONG><a name="[1d6]"></a>downmix_and_resample</STRONG> (Thumb, 384 bytes, Stack size 80 bytes, analysis.o(i.downmix_and_resample))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = downmix_and_resample &rArr; silk_resampler_down2_hp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_down2_hp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
</UL>

<P><STRONG><a name="[313]"></a>fast_atan2f</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, analysis.o(i.fast_atan2f))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonality_analysis
</UL>

<P><STRONG><a name="[1d7]"></a>silk_resampler_down2_hp</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, analysis.o(i.silk_resampler_down2_hp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_resampler_down2_hp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downmix_and_resample
</UL>

<P><STRONG><a name="[253]"></a>tonality_analysis</STRONG> (Thumb, 11058 bytes, Stack size 1952 bytes, analysis.o(i.tonality_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 2524<LI>Call Chain = tonality_analysis &rArr; analysis_compute_gru &rArr; gemm_accum
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_c
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digital_silence
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_compute_gru
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_compute_dense
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan2f
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downmix_and_resample
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_analysis
</UL>

<P><STRONG><a name="[16f]"></a>gemm_accum</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, mlp.o(i.gemm_accum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gemm_accum
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_compute_gru
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_compute_dense
</UL>

<P><STRONG><a name="[170]"></a>sigmoid_approx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlp.o(i.sigmoid_approx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sigmoid_approx
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tansig_approx
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_compute_gru
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_compute_dense
</UL>

<P><STRONG><a name="[171]"></a>tansig_approx</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, mlp.o(i.tansig_approx))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmoid_approx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_compute_gru
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_compute_dense
</UL>

<P><STRONG><a name="[23c]"></a>parse_size</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, opus.o(i.parse_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_size
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_parse_impl
</UL>

<P><STRONG><a name="[cd]"></a>FLOAT2INT16</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, opus_decoder.o(i.FLOAT2INT16))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FLOAT2INT16 &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode
</UL>

<P><STRONG><a name="[210]"></a>align</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, opus_decoder.o(i.align))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_get_size
</UL>

<P><STRONG><a name="[202]"></a>ec_tell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, opus_decoder.o(i.ec_tell))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
</UL>

<P><STRONG><a name="[1fa]"></a>opus_alloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, opus_decoder.o(i.opus_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = opus_alloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_create
</UL>

<P><STRONG><a name="[1ff]"></a>opus_decode_frame</STRONG> (Thumb, 2804 bytes, Stack size 272 bytes, opus_decoder.o(i.opus_decode_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 3320 + In Cycle
<LI>Call Chain = opus_decode_frame &rArr;  opus_decode_frame (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_fade
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_ResetDecoder
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Decode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_ctl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
</UL>

<P><STRONG><a name="[20d]"></a>opus_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, opus_decoder.o(i.opus_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = opus_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decoder_create
</UL>

<P><STRONG><a name="[204]"></a>opus_packet_get_mode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, opus_decoder.o(i.opus_packet_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_native
</UL>

<P><STRONG><a name="[203]"></a>smooth_fade</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, opus_decoder.o(i.smooth_fade))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = smooth_fade
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_decode_frame
</UL>

<P><STRONG><a name="[d0]"></a>FLOAT2INT16</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, opus_encoder.o(i.FLOAT2INT16))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FLOAT2INT16 &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[22f]"></a>align</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, opus_encoder.o(i.align))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_get_size
</UL>

<P><STRONG><a name="[1c3]"></a>celt_inner_prod_c</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, opus_encoder.o(i.celt_inner_prod_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_frame_energy
</UL>

<P><STRONG><a name="[1f1]"></a>celt_maxabs16</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, opus_encoder.o(i.celt_maxabs16))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digital_silence
</UL>

<P><STRONG><a name="[224]"></a>compute_equiv_rate</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, opus_encoder.o(i.compute_equiv_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = compute_equiv_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[1c2]"></a>compute_frame_energy</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, opus_encoder.o(i.compute_frame_energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = compute_frame_energy &rArr; celt_inner_prod_c
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[215]"></a>compute_redundancy_bytes</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, opus_encoder.o(i.compute_redundancy_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = compute_redundancy_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[219]"></a>compute_silk_rate_for_hybrid</STRONG> (Thumb, 250 bytes, Stack size 44 bytes, opus_encoder.o(i.compute_silk_rate_for_hybrid))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = compute_silk_rate_for_hybrid
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[218]"></a>dc_reject</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, opus_encoder.o(i.dc_reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dc_reject
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[21f]"></a>decide_dtx_mode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, opus_encoder.o(i.decide_dtx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[226]"></a>decide_fec</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, opus_encoder.o(i.decide_fec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decide_fec
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[21e]"></a>ec_tell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, opus_encoder.o(i.ec_tell))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[21a]"></a>gain_fade</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, opus_encoder.o(i.gain_fade))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gain_fade
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[21c]"></a>gen_toc</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, opus_encoder.o(i.gen_toc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gen_toc
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[1ec]"></a>hp_cutoff</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, opus_encoder.o(i.hp_cutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hp_cutoff &rArr; silk_biquad_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_biquad_float
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[214]"></a>opus_encode_frame_native</STRONG> (Thumb, 6762 bytes, Stack size 208 bytes, opus_encoder.o(i.opus_encode_frame_native))
<BR><BR>[Stack]<UL><LI>Max Depth = 29280<LI>Call Chain = opus_encode_frame_native &rArr; silk_Encode &rArr; silk_encode_frame_FLP &rArr; silk_find_pitch_lags_FLP &rArr; silk_pitch_analysis_core_FLP &rArr; silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_log2lin
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_pad
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_shrink
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_fade
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_cutoff
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_toc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain_fade
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decide_dtx_mode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_reject
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_silk_rate_for_hybrid
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_redundancy_bytes
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_frame_energy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLOAT2INT16
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[22d]"></a>opus_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, opus_encoder.o(i.opus_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = opus_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_create
</UL>

<P><STRONG><a name="[1ed]"></a>silk_biquad_float</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, opus_encoder.o(i.silk_biquad_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = silk_biquad_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hp_cutoff
</UL>

<P><STRONG><a name="[21d]"></a>stereo_fade</STRONG> (Thumb, 342 bytes, Stack size 28 bytes, opus_encoder.o(i.stereo_fade))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stereo_fade
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_frame_native
</UL>

<P><STRONG><a name="[223]"></a>user_bitrate_to_bitrate</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, opus_encoder.o(i.user_bitrate_to_bitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_bitrate_to_bitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encoder_ctl
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_encode_native
</UL>

<P><STRONG><a name="[23d]"></a>opus_repacketizer_cat_impl</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, repacketizer.o(i.opus_repacketizer_cat_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = opus_repacketizer_cat_impl &rArr; opus_packet_parse_impl &rArr; parse_size
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_nb_frames
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_parse_impl
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_packet_get_samples_per_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_repacketizer_cat
</UL>

<P><STRONG><a name="[24d]"></a>bits2pulses</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bands.o(i.bits2pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bits2pulses
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[1c1]"></a>celt_inner_prod_c</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bands.o(i.celt_inner_prod_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_band_energies
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
</UL>

<P><STRONG><a name="[1c6]"></a>celt_sudiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bands.o(i.celt_sudiv))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_qn
</UL>

<P><STRONG><a name="[174]"></a>celt_udiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bands.o(i.celt_udiv))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spreading_decision
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_collapse
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[244]"></a>compute_channel_weights</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bands.o(i.compute_channel_weights))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
</UL>

<P><STRONG><a name="[1c5]"></a>compute_qn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, bands.o(i.compute_qn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compute_qn
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_sudiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[1c8]"></a>compute_theta</STRONG> (Thumb, 1230 bytes, Stack size 120 bytes, bands.o(i.compute_theta))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = compute_theta &rArr; stereo_itheta &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isqrt32
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell_frac
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_decode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_update
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitexact_log2tan
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitexact_cos
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_split
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intensity_stereo
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_qn
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
</UL>

<P><STRONG><a name="[1d5]"></a>deinterleave_hadamard</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, bands.o(i.deinterleave_hadamard))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = deinterleave_hadamard &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[1d0]"></a>intensity_stereo</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, bands.o(i.intensity_stereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = intensity_stereo &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[1ee]"></a>interleave_hadamard</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, bands.o(i.interleave_hadamard))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = interleave_hadamard &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[24e]"></a>pulses2bits</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bands.o(i.pulses2bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pulses2bits
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
</UL>

<P><STRONG><a name="[243]"></a>quant_band</STRONG> (Thumb, 606 bytes, Stack size 128 bytes, bands.o(i.quant_band))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haar1
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_n1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interleave_hadamard
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinterleave_hadamard
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
</UL>

<P><STRONG><a name="[246]"></a>quant_band_n1</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, bands.o(i.quant_band_n1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = quant_band_n1 &rArr; ec_enc_bits &rArr; ec_write_byte_at_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[245]"></a>quant_band_stereo</STRONG> (Thumb, 994 bytes, Stack size 144 bytes, bands.o(i.quant_band_stereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = quant_band_stereo &rArr; quant_band &rArr; quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_merge
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_n1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
</UL>

<P><STRONG><a name="[248]"></a>quant_partition</STRONG> (Thumb, 1098 bytes, Stack size 200 bytes, bands.o(i.quant_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + In Cycle
<LI>Call Chain = quant_partition &rArr;  quant_partition (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_lcg_rand
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulses2bits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2pulses
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_partition
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band
</UL>

<P><STRONG><a name="[242]"></a>special_hybrid_folding</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bands.o(i.special_hybrid_folding))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = special_hybrid_folding &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_all_bands
</UL>

<P><STRONG><a name="[249]"></a>stereo_merge</STRONG> (Thumb, 444 bytes, Stack size 80 bytes, bands.o(i.stereo_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = stereo_merge &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_band_stereo
</UL>

<P><STRONG><a name="[1d1]"></a>stereo_split</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bands.o(i.stereo_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stereo_split
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_theta
</UL>

<P><STRONG><a name="[1c0]"></a>comb_filter_const_c</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, celt.o(i.comb_filter_const_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = comb_filter_const_c
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_filter
</UL>

<P><STRONG><a name="[177]"></a>celt_decode_lost</STRONG> (Thumb, 2126 bytes, Stack size 296 bytes, celt_decoder.o(i.celt_decode_lost))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = celt_decode_lost &rArr; celt_synthesis &rArr; clt_mdct_backward_c &rArr; opus_fft_impl &rArr; kf_bfly5
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_iir
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_fir_c
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_lpc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_celt_autocorr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefilter_and_fold
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_synthesis
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_plc_pitch_search
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_lcg_rand
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[17b]"></a>celt_plc_pitch_search</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, celt_decoder.o(i.celt_plc_pitch_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = celt_plc_pitch_search &rArr; pitch_downsample &rArr; _celt_autocorr &rArr; celt_pitch_xcorr_c &rArr; xcorr_kernel_c
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_downsample
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
</UL>

<P><STRONG><a name="[17a]"></a>celt_synthesis</STRONG> (Thumb, 842 bytes, Stack size 104 bytes, celt_decoder.o(i.celt_synthesis))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = celt_synthesis &rArr; clt_mdct_backward_c &rArr; opus_fft_impl &rArr; kf_bfly5
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_mdct_backward_c
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denormalise_bands
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
</UL>

<P><STRONG><a name="[181]"></a>deemphasis</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, celt_decoder.o(i.deemphasis))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = deemphasis &rArr; deemphasis_stereo_simple
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deemphasis_stereo_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[1d4]"></a>deemphasis_stereo_simple</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, celt_decoder.o(i.deemphasis_stereo_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = deemphasis_stereo_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deemphasis
</UL>

<P><STRONG><a name="[183]"></a>ec_tell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, celt_decoder.o(i.ec_tell))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_decode
</UL>

<P><STRONG><a name="[193]"></a>opus_custom_decoder_get_size</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, celt_decoder.o(i.opus_custom_decoder_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = opus_custom_decoder_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_ctl
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decoder_get_size
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_init
</UL>

<P><STRONG><a name="[195]"></a>opus_custom_decoder_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, celt_decoder.o(i.opus_custom_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = opus_custom_decoder_init &rArr; opus_custom_decoder_ctl &rArr; opus_custom_decoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_ctl
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_decoder_get_size
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decoder_init
</UL>

<P><STRONG><a name="[179]"></a>prefilter_and_fold</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, celt_decoder.o(i.prefilter_and_fold))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = prefilter_and_fold &rArr; comb_filter &rArr; comb_filter_const_c
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_lost
</UL>

<P><STRONG><a name="[189]"></a>tf_decode</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, celt_decoder.o(i.tf_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tf_decode &rArr; ec_dec_bit_logp &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_decode_with_ec_dred
</UL>

<P><STRONG><a name="[16a]"></a>alloc_trim_analysis</STRONG> (Thumb, 1506 bytes, Stack size 120 bytes, celt_encoder.o(i.alloc_trim_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = alloc_trim_analysis &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_inner_prod_c
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[16b]"></a>celt_inner_prod_c</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, celt_encoder.o(i.celt_inner_prod_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_trim_analysis
</UL>

<P><STRONG><a name="[19b]"></a>celt_maxabs16</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, celt_encoder.o(i.celt_maxabs16))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1a3]"></a>compute_mdcts</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, celt_encoder.o(i.compute_mdcts))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = compute_mdcts &rArr; clt_mdct_forward_c &rArr; opus_fft_impl &rArr; kf_bfly5
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_mdct_forward_c
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1ae]"></a>compute_vbr</STRONG> (Thumb, 838 bytes, Stack size 80 bytes, celt_encoder.o(i.compute_vbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = compute_vbr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1a7]"></a>dynalloc_analysis</STRONG> (Thumb, 3130 bytes, Stack size 120 bytes, celt_encoder.o(i.dynalloc_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dynalloc_analysis &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;median_of_5
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;median_of_3
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[198]"></a>ec_tell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, celt_encoder.o(i.ec_tell))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_encode
</UL>

<P><STRONG><a name="[1f2]"></a>l1_metric</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, celt_encoder.o(i.l1_metric))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l1_metric &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tf_analysis
</UL>

<P><STRONG><a name="[1d9]"></a>median_of_3</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, celt_encoder.o(i.median_of_3))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
</UL>

<P><STRONG><a name="[1d8]"></a>median_of_5</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, celt_encoder.o(i.median_of_5))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dynalloc_analysis
</UL>

<P><STRONG><a name="[1b3]"></a>opus_custom_encoder_get_size</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, celt_encoder.o(i.opus_custom_encoder_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = opus_custom_encoder_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_get_size
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_init_arch
</UL>

<P><STRONG><a name="[1b5]"></a>opus_custom_encoder_init_arch</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, celt_encoder.o(i.opus_custom_encoder_init_arch))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = opus_custom_encoder_init_arch &rArr; opus_custom_encoder_ctl &rArr; opus_custom_encoder_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_ctl
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_custom_encoder_get_size
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encoder_init
</UL>

<P><STRONG><a name="[1a5]"></a>patch_transient_decision</STRONG> (Thumb, 664 bytes, Stack size 128 bytes, celt_encoder.o(i.patch_transient_decision))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = patch_transient_decision
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[19e]"></a>run_prefilter</STRONG> (Thumb, 1266 bytes, Stack size 128 bytes, celt_encoder.o(i.run_prefilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = run_prefilter &rArr; remove_doubling &rArr; compute_pitch_gain &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_downsample
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comb_filter
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1ac]"></a>stereo_analysis</STRONG> (Thumb, 410 bytes, Stack size 80 bytes, celt_encoder.o(i.stereo_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stereo_analysis &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1a8]"></a>tf_analysis</STRONG> (Thumb, 1510 bytes, Stack size 136 bytes, celt_encoder.o(i.tf_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tf_analysis &rArr; l1_metric &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l1_metric
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haar1
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1aa]"></a>tf_encode</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, celt_encoder.o(i.tf_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tf_encode &rArr; ec_enc_bit_logp &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1a2]"></a>transient_analysis</STRONG> (Thumb, 1324 bytes, Stack size 128 bytes, celt_encoder.o(i.transient_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = transient_analysis &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_encode_with_ec
</UL>

<P><STRONG><a name="[1b6]"></a>xcorr_kernel_c</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, celt_lpc.o(i.xcorr_kernel_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xcorr_kernel_c
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_iir
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_fir_c
</UL>

<P><STRONG><a name="[1d2]"></a>cwrsi</STRONG> (Thumb, 408 bytes, Stack size 28 bytes, cwrs.o(i.cwrsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cwrsi
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_pulses
</UL>

<P><STRONG><a name="[1e7]"></a>icwrs</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, cwrs.o(i.icwrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icwrs
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_pulses
</UL>

<P><STRONG><a name="[1da]"></a>ec_dec_normalize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, entdec.o(i.ec_dec_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_update
</UL>

<P><STRONG><a name="[1dc]"></a>ec_read_byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, entdec.o(i.ec_read_byte))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_normalize
</UL>

<P><STRONG><a name="[1db]"></a>ec_read_byte_from_end</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, entdec.o(i.ec_read_byte_from_end))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bits
</UL>

<P><STRONG><a name="[1df]"></a>ec_enc_carry_out</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, entenc.o(i.ec_enc_carry_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_normalize
</UL>

<P><STRONG><a name="[1dd]"></a>ec_enc_normalize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, entenc.o(i.ec_enc_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_carry_out
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_encode_bin
</UL>

<P><STRONG><a name="[1e0]"></a>ec_write_byte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, entenc.o(i.ec_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_carry_out
</UL>

<P><STRONG><a name="[1de]"></a>ec_write_byte_at_end</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, entenc.o(i.ec_write_byte_at_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_write_byte_at_end
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_done
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bits
</UL>

<P><STRONG><a name="[232]"></a>kf_bfly2</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, kiss_fft.o(i.kf_bfly2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kf_bfly2
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
</UL>

<P><STRONG><a name="[234]"></a>kf_bfly3</STRONG> (Thumb, 542 bytes, Stack size 84 bytes, kiss_fft.o(i.kf_bfly3))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = kf_bfly3
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
</UL>

<P><STRONG><a name="[233]"></a>kf_bfly4</STRONG> (Thumb, 934 bytes, Stack size 84 bytes, kiss_fft.o(i.kf_bfly4))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = kf_bfly4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
</UL>

<P><STRONG><a name="[235]"></a>kf_bfly5</STRONG> (Thumb, 1176 bytes, Stack size 160 bytes, kiss_fft.o(i.kf_bfly5))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = kf_bfly5
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opus_fft_impl
</UL>

<P><STRONG><a name="[1e5]"></a>ec_laplace_get_freq1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, laplace.o(i.ec_laplace_get_freq1))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_encode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_decode
</UL>

<P><STRONG><a name="[240]"></a>celt_fir5</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, pitch.o(i.celt_fir5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = celt_fir5
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_downsample
</UL>

<P><STRONG><a name="[1b8]"></a>celt_inner_prod_c</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pitch.o(i.celt_inner_prod_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_c
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
</UL>

<P><STRONG><a name="[251]"></a>celt_udiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pitch.o(i.celt_udiv))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
</UL>

<P><STRONG><a name="[1c4]"></a>compute_pitch_gain</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, pitch.o(i.compute_pitch_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = compute_pitch_gain &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
</UL>

<P><STRONG><a name="[250]"></a>dual_inner_prod_c</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, pitch.o(i.dual_inner_prod_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dual_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_doubling
</UL>

<P><STRONG><a name="[241]"></a>find_best_pitch</STRONG> (Thumb, 322 bytes, Stack size 36 bytes, pitch.o(i.find_best_pitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = find_best_pitch
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search
</UL>

<P><STRONG><a name="[1b7]"></a>xcorr_kernel_c</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, pitch.o(i.xcorr_kernel_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xcorr_kernel_c
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_c
</UL>

<P><STRONG><a name="[24b]"></a>ec_tell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, quant_bands.o(i.ec_tell))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unquant_coarse_energy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy_impl
</UL>

<P><STRONG><a name="[24a]"></a>loss_distortion</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, quant_bands.o(i.loss_distortion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = loss_distortion
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
</UL>

<P><STRONG><a name="[24c]"></a>quant_coarse_energy_impl</STRONG> (Thumb, 772 bytes, Stack size 136 bytes, quant_bands.o(i.quant_coarse_energy_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = quant_coarse_energy_impl &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_tell
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_laplace_encode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quant_coarse_energy
</UL>

<P><STRONG><a name="[1ef]"></a>celt_udiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rate.o(i.celt_udiv))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_bits2pulses
</UL>

<P><STRONG><a name="[1bd]"></a>interp_bits2pulses</STRONG> (Thumb, 1552 bytes, Stack size 120 bytes, rate.o(i.interp_bits2pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = interp_bits2pulses &rArr; ec_enc_uint &rArr; ec_encode &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_uint
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_bit_logp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_uint
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_bit_logp
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clt_compute_allocation
</UL>

<P><STRONG><a name="[252]"></a>celt_inner_prod_c</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vq.o(i.celt_inner_prod_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = celt_inner_prod_c
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;renormalise_vector
</UL>

<P><STRONG><a name="[1e9]"></a>celt_udiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vq.o(i.celt_udiv))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_collapse_mask
</UL>

<P><STRONG><a name="[1ea]"></a>exp_rotation1</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, vq.o(i.exp_rotation1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exp_rotation1
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp_rotation
</UL>

<P><STRONG><a name="[167]"></a>extract_collapse_mask</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, vq.o(i.extract_collapse_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = extract_collapse_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_udiv
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[311]"></a>fast_atan2f</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, vq.o(i.fast_atan2f))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stereo_itheta
</UL>

<P><STRONG><a name="[166]"></a>normalise_residual</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, vq.o(i.normalise_residual))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = normalise_residual &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_unquant
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_quant
</UL>

<P><STRONG><a name="[27b]"></a>ec_tell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, enc_api.o(i.ec_tell))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_Encode
</UL>

<P><STRONG><a name="[28b]"></a>silk_QueryEncoder</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, enc_api.o(i.silk_QueryEncoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_QueryEncoder
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_InitEncoder
</UL>

<P><STRONG><a name="[256]"></a>silk_A2NLSF_eval_poly</STRONG> (Thumb, 352 bytes, Stack size 20 bytes, a2nlsf.o(i.silk_A2NLSF_eval_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = silk_A2NLSF_eval_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF
</UL>

<P><STRONG><a name="[255]"></a>silk_A2NLSF_init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, a2nlsf.o(i.silk_A2NLSF_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = silk_A2NLSF_init &rArr; silk_A2NLSF_trans_poly
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF_trans_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF
</UL>

<P><STRONG><a name="[25a]"></a>silk_A2NLSF_trans_poly</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, a2nlsf.o(i.silk_A2NLSF_trans_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = silk_A2NLSF_trans_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF_init
</UL>

<P><STRONG><a name="[2c3]"></a>silk_CLZ_FRAC</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, cng.o(i.silk_CLZ_FRAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = silk_CLZ_FRAC
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_SQRT_APPROX
</UL>

<P><STRONG><a name="[262]"></a>silk_CNG_exc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cng.o(i.silk_CNG_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = silk_CNG_exc
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG
</UL>

<P><STRONG><a name="[261]"></a>silk_SQRT_APPROX</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cng.o(i.silk_SQRT_APPROX))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = silk_SQRT_APPROX &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ_FRAC
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CNG
</UL>

<P><STRONG><a name="[265]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, decode_core.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
</UL>

<P><STRONG><a name="[264]"></a>silk_DIV32_varQ</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, decode_core.o(i.silk_DIV32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_DIV32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_core
</UL>

<P><STRONG><a name="[286]"></a>silk_INVERSE32_varQ</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, decode_core.o(i.silk_INVERSE32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_decode_core
</UL>

<P><STRONG><a name="[2e4]"></a>combine_and_check</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, encode_pulses.o(i.combine_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = combine_and_check
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_pulses
</UL>

<P><STRONG><a name="[2f6]"></a>silk_min_32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gain_quant.o(i.silk_min_32))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_quant
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_dequant
</UL>

<P><STRONG><a name="[2f7]"></a>silk_CLZ_FRAC</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, lin2log.o(i.silk_CLZ_FRAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = silk_CLZ_FRAC
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_lin2log
</UL>

<P><STRONG><a name="[299]"></a>silk_LP_interpolate_filter_taps</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, lp_variable_cutoff.o(i.silk_LP_interpolate_filter_taps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = silk_LP_interpolate_filter_taps
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LP_variable_cutoff
</UL>

<P><STRONG><a name="[e3]"></a>LPC_inverse_pred_gain_QA_c</STRONG> (Thumb, 1698 bytes, Stack size 80 bytes, lpc_inv_pred_gain.o(i.LPC_inverse_pred_gain_QA_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_inverse_pred_gain_c
</UL>

<P><STRONG><a name="[e4]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc_inv_pred_gain.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_inverse_pred_gain_QA_c
</UL>

<P><STRONG><a name="[e5]"></a>silk_INVERSE32_varQ</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, lpc_inv_pred_gain.o(i.silk_INVERSE32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_inverse_pred_gain_QA_c
</UL>

<P><STRONG><a name="[2a3]"></a>silk_NLSF_residual_dequant</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, nlsf_decode.o(i.silk_NLSF_residual_dequant))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = silk_NLSF_residual_dequant
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_decode
</UL>

<P><STRONG><a name="[267]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nlsf_encode.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
</UL>

<P><STRONG><a name="[266]"></a>silk_DIV32_varQ</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, nlsf_encode.o(i.silk_DIV32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_DIV32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_encode
</UL>

<P><STRONG><a name="[2aa]"></a>silk_max_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nlsf_stabilize.o(i.silk_max_int))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_stabilize
</UL>

<P><STRONG><a name="[2ab]"></a>silk_min_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nlsf_stabilize.o(i.silk_min_int))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_stabilize
</UL>

<P><STRONG><a name="[29f]"></a>silk_max_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nlsf_vq_weights_laroia.o(i.silk_max_int))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_VQ_weights_laroia
</UL>

<P><STRONG><a name="[2a0]"></a>silk_min_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nlsf_vq_weights_laroia.o(i.silk_min_int))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF_VQ_weights_laroia
</UL>

<P><STRONG><a name="[29c]"></a>silk_NLSF2A_find_poly</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nlsf2a.o(i.silk_NLSF2A_find_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = silk_NLSF2A_find_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NLSF2A
</UL>

<P><STRONG><a name="[269]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nsq.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
</UL>

<P><STRONG><a name="[268]"></a>silk_DIV32_varQ</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, nsq.o(i.silk_DIV32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_DIV32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_nsq_scale_states
</UL>

<P><STRONG><a name="[287]"></a>silk_INVERSE32_varQ</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, nsq.o(i.silk_INVERSE32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_nsq_scale_states
</UL>

<P><STRONG><a name="[2fc]"></a>silk_NSQ_noise_shape_feedback_loop_c</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, nsq.o(i.silk_NSQ_noise_shape_feedback_loop_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = silk_NSQ_noise_shape_feedback_loop_c
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer
</UL>

<P><STRONG><a name="[2ae]"></a>silk_noise_shape_quantizer</STRONG> (Thumb, 1430 bytes, Stack size 128 bytes, nsq.o(i.silk_noise_shape_quantizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = silk_noise_shape_quantizer &rArr; silk_NSQ_noise_shape_feedback_loop_c
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer_short_prediction_c
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_noise_shape_feedback_loop_c
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_c
</UL>

<P><STRONG><a name="[2fb]"></a>silk_noise_shape_quantizer_short_prediction_c</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, nsq.o(i.silk_noise_shape_quantizer_short_prediction_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_noise_shape_quantizer_short_prediction_c
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer
</UL>

<P><STRONG><a name="[2ad]"></a>silk_nsq_scale_states</STRONG> (Thumb, 680 bytes, Stack size 56 bytes, nsq.o(i.silk_nsq_scale_states))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = silk_nsq_scale_states &rArr; silk_DIV32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_c
</UL>

<P><STRONG><a name="[26b]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nsq_del_dec.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
</UL>

<P><STRONG><a name="[26a]"></a>silk_DIV32_varQ</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, nsq_del_dec.o(i.silk_DIV32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_DIV32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_nsq_del_dec_scale_states
</UL>

<P><STRONG><a name="[288]"></a>silk_INVERSE32_varQ</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, nsq_del_dec.o(i.silk_INVERSE32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_nsq_del_dec_scale_states
</UL>

<P><STRONG><a name="[2b0]"></a>silk_min_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nsq_del_dec.o(i.silk_min_int))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
</UL>

<P><STRONG><a name="[2b2]"></a>silk_noise_shape_quantizer_del_dec</STRONG> (Thumb, 3956 bytes, Stack size 168 bytes, nsq_del_dec.o(i.silk_noise_shape_quantizer_del_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = silk_noise_shape_quantizer_del_dec &rArr; silk_noise_shape_quantizer_short_prediction_c
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer_short_prediction_c
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
</UL>

<P><STRONG><a name="[2fd]"></a>silk_noise_shape_quantizer_short_prediction_c</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, nsq_del_dec.o(i.silk_noise_shape_quantizer_short_prediction_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_noise_shape_quantizer_short_prediction_c
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_quantizer_del_dec
</UL>

<P><STRONG><a name="[2b1]"></a>silk_nsq_del_dec_scale_states</STRONG> (Thumb, 818 bytes, Stack size 64 bytes, nsq_del_dec.o(i.silk_nsq_del_dec_scale_states))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = silk_nsq_del_dec_scale_states &rArr; silk_DIV32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_del_dec_c
</UL>

<P><STRONG><a name="[25c]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, plc.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ_FRAC
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_glue_frames
</UL>

<P><STRONG><a name="[25b]"></a>silk_CLZ_FRAC</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, plc.o(i.silk_CLZ_FRAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_glue_frames
</UL>

<P><STRONG><a name="[289]"></a>silk_INVERSE32_varQ</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, plc.o(i.silk_INVERSE32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
</UL>

<P><STRONG><a name="[2b5]"></a>silk_PLC_conceal</STRONG> (Thumb, 2802 bytes, Stack size 184 bytes, plc.o(i.silk_PLC_conceal))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = silk_PLC_conceal &rArr; silk_LPC_inverse_pred_gain_c &rArr; LPC_inverse_pred_gain_QA_c &rArr; silk_INVERSE32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_min_int
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_min_32
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_max_int
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_max_32
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_energy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_INVERSE32_varQ
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_inverse_pred_gain_c
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC
</UL>

<P><STRONG><a name="[2b7]"></a>silk_PLC_energy</STRONG> (Thumb, 386 bytes, Stack size 56 bytes, plc.o(i.silk_PLC_energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = silk_PLC_energy &rArr; silk_sum_sqr_shift
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_sum_sqr_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
</UL>

<P><STRONG><a name="[2b6]"></a>silk_PLC_update</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, plc.o(i.silk_PLC_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = silk_PLC_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC
</UL>

<P><STRONG><a name="[2bc]"></a>silk_max_32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plc.o(i.silk_max_32))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_glue_frames
</UL>

<P><STRONG><a name="[2b8]"></a>silk_max_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plc.o(i.silk_max_int))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
</UL>

<P><STRONG><a name="[2bb]"></a>silk_min_32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plc.o(i.silk_min_32))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
</UL>

<P><STRONG><a name="[2b9]"></a>silk_min_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, plc.o(i.silk_min_int))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_PLC_conceal
</UL>

<P><STRONG><a name="[30a]"></a>silk_resampler_private_down_FIR_INTERPOL</STRONG> (Thumb, 2344 bytes, Stack size 52 bytes, resampler_private_down_fir.o(i.silk_resampler_private_down_FIR_INTERPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = silk_resampler_private_down_FIR_INTERPOL
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_down_FIR
</UL>

<P><STRONG><a name="[309]"></a>silk_resampler_private_IIR_FIR_INTERPOL</STRONG> (Thumb, 288 bytes, Stack size 28 bytes, resampler_private_iir_fir.o(i.silk_resampler_private_IIR_FIR_INTERPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = silk_resampler_private_IIR_FIR_INTERPOL
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_private_IIR_FIR
</UL>

<P><STRONG><a name="[30b]"></a>combine_pulses</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, shell_coder.o(i.combine_pulses))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = combine_pulses
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_shell_encoder
</UL>

<P><STRONG><a name="[1d3]"></a>decode_split</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, shell_coder.o(i.decode_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = decode_split &rArr; ec_dec_icdf &rArr; ec_dec_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dec_icdf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_shell_decoder
</UL>

<P><STRONG><a name="[1e8]"></a>encode_split</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, shell_coder.o(i.encode_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = encode_split &rArr; ec_enc_icdf &rArr; ec_enc_normalize &rArr; ec_enc_carry_out &rArr; ec_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_enc_icdf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_shell_encoder
</UL>

<P><STRONG><a name="[25e]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stereo_find_predictor.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ_FRAC
</UL>

<P><STRONG><a name="[25d]"></a>silk_CLZ_FRAC</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stereo_find_predictor.o(i.silk_CLZ_FRAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_SQRT_APPROX
</UL>

<P><STRONG><a name="[26c]"></a>silk_DIV32_varQ</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, stereo_find_predictor.o(i.silk_DIV32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_DIV32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_find_predictor
</UL>

<P><STRONG><a name="[2c4]"></a>silk_SQRT_APPROX</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stereo_find_predictor.o(i.silk_SQRT_APPROX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_SQRT_APPROX &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ_FRAC
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_find_predictor
</UL>

<P><STRONG><a name="[30e]"></a>silk_max_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stereo_find_predictor.o(i.silk_max_int))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_find_predictor
</UL>

<P><STRONG><a name="[26e]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stereo_lr_to_ms.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_DIV32_varQ
</UL>

<P><STRONG><a name="[26d]"></a>silk_DIV32_varQ</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, stereo_lr_to_ms.o(i.silk_DIV32_varQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = silk_DIV32_varQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ32
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_stereo_LR_to_MS
</UL>

<P><STRONG><a name="[310]"></a>silk_CLZ32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sum_sqr_shift.o(i.silk_CLZ32))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_sum_sqr_shift
</UL>

<P><STRONG><a name="[2c6]"></a>silk_CLZ_FRAC</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, vad.o(i.silk_CLZ_FRAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = silk_CLZ_FRAC
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_SQRT_APPROX
</UL>

<P><STRONG><a name="[2c5]"></a>silk_SQRT_APPROX</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, vad.o(i.silk_SQRT_APPROX))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = silk_SQRT_APPROX &rArr; silk_CLZ_FRAC
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_CLZ_FRAC
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_GetSA_Q8_c
</UL>

<P><STRONG><a name="[2ca]"></a>silk_VAD_GetNoiseLevels</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, vad.o(i.silk_VAD_GetNoiseLevels))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = silk_VAD_GetNoiseLevels
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_GetSA_Q8_c
</UL>

<P><STRONG><a name="[2c9]"></a>silk_min_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vad.o(i.silk_min_int))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_VAD_GetSA_Q8_c
</UL>

<P><STRONG><a name="[2f4]"></a>silk_float2short_array</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, control_codec.o(i.silk_float2short_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = silk_float2short_array &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_setup_resamplers
</UL>

<P><STRONG><a name="[2d4]"></a>silk_setup_complexity</STRONG> (Thumb, 684 bytes, Stack size 12 bytes, control_codec.o(i.silk_setup_complexity))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = silk_setup_complexity
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_control_encoder
</UL>

<P><STRONG><a name="[2d3]"></a>silk_setup_fs</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, control_codec.o(i.silk_setup_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = silk_setup_fs
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_control_encoder
</UL>

<P><STRONG><a name="[2d1]"></a>silk_setup_resamplers</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, control_codec.o(i.silk_setup_resamplers))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = silk_setup_resamplers &rArr; silk_float2short_array &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_float2short_array
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_resampler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_control_encoder
</UL>

<P><STRONG><a name="[2e2]"></a>ec_tell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, encode_frame_flp.o(i.ec_tell))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[28c]"></a>silk_LBRR_encode_FLP</STRONG> (Thumb, 346 bytes, Stack size 4448 bytes, encode_frame_flp.o(i.silk_LBRR_encode_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 5952<LI>Call Chain = silk_LBRR_encode_FLP &rArr; silk_NSQ_wrapper_FLP &rArr; silk_NSQ_del_dec_c &rArr; silk_noise_shape_quantizer_del_dec &rArr; silk_noise_shape_quantizer_short_prediction_c
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_wrapper_FLP
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_gains_dequant
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_encode_frame_FLP
</UL>

<P><STRONG><a name="[293]"></a>silk_LPC_analysis_filter10_FLP</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lpc_analysis_filter_flp.o(i.silk_LPC_analysis_filter10_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_LPC_analysis_filter10_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
</UL>

<P><STRONG><a name="[294]"></a>silk_LPC_analysis_filter12_FLP</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lpc_analysis_filter_flp.o(i.silk_LPC_analysis_filter12_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_LPC_analysis_filter12_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
</UL>

<P><STRONG><a name="[295]"></a>silk_LPC_analysis_filter16_FLP</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, lpc_analysis_filter_flp.o(i.silk_LPC_analysis_filter16_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_LPC_analysis_filter16_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
</UL>

<P><STRONG><a name="[291]"></a>silk_LPC_analysis_filter6_FLP</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lpc_analysis_filter_flp.o(i.silk_LPC_analysis_filter6_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_LPC_analysis_filter6_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
</UL>

<P><STRONG><a name="[292]"></a>silk_LPC_analysis_filter8_FLP</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lpc_analysis_filter_flp.o(i.silk_LPC_analysis_filter8_FLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = silk_LPC_analysis_filter8_FLP
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_LPC_analysis_filter_FLP
</UL>

<P><STRONG><a name="[1f3]"></a>limit_coefs</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, noise_shape_analysis_flp.o(i.limit_coefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = limit_coefs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander_FLP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
</UL>

<P><STRONG><a name="[2fa]"></a>warped_true2monic_coefs</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, noise_shape_analysis_flp.o(i.warped_true2monic_coefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = warped_true2monic_coefs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_bwexpander_FLP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_noise_shape_analysis_FLP
</UL>

<P><STRONG><a name="[2bf]"></a>silk_P_Ana_calc_corr_st3</STRONG> (Thumb, 266 bytes, Stack size 264 bytes, pitch_analysis_core_flp.o(i.silk_P_Ana_calc_corr_st3))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = silk_P_Ana_calc_corr_st3 &rArr; celt_pitch_xcorr_c &rArr; xcorr_kernel_c
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;celt_pitch_xcorr_c
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[2c0]"></a>silk_P_Ana_calc_energy_st3</STRONG> (Thumb, 474 bytes, Stack size 200 bytes, pitch_analysis_core_flp.o(i.silk_P_Ana_calc_energy_st3))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = silk_P_Ana_calc_energy_st3 &rArr; silk_energy_FLP &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_energy_FLP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[2f5]"></a>silk_float2short_array</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, pitch_analysis_core_flp.o(i.silk_float2short_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = silk_float2short_array &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[2f8]"></a>silk_log2</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pitch_analysis_core_flp.o(i.silk_log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = silk_log2 &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[2ff]"></a>silk_short2float_array</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pitch_analysis_core_flp.o(i.silk_short2float_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = silk_short2float_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_pitch_analysis_core_FLP
</UL>

<P><STRONG><a name="[259]"></a>silk_float2int</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, wrappers_flp.o(i.silk_float2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = silk_float2int &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_NSQ_wrapper_FLP
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_quant_LTP_gains_FLP
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silk_A2NLSF_FLP
</UL>

<P><STRONG><a name="[c1]"></a>DataStageIn</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, usbfsd_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEpTxAddr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpTxCnt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CopyUserToPMABuf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessIn0
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[c5]"></a>DataStageOut</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, usbfsd_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; USB_CopyPMAToUserBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetEpRxAddr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CopyPMAToUserBuf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetEpTxCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessOut0
</UL>

<P><STRONG><a name="[c8]"></a>Data_Setup0</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usbfsd_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; USB_CopyUserToPMABuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessSetup0
</UL>

<P><STRONG><a name="[e9]"></a>NoData_Setup0</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, usbfsd_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; USB_SetEpRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProcessSetup0
</UL>

<P><STRONG><a name="[142]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>

<P><STRONG><a name="[8b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
